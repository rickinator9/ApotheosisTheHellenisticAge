# Triggers the vassal contract on-action.
# LIEGE is the character that is the liege in the negotiation.
# VASSAL is the character that is the vassal in the negotiation.
trigger_vassal_contract_change_on_action = {
	$VASSAL$ = {
		# Save this character as the holder of the contract.
		save_scope_as = vassal_contract_holder

		# Check whether a dependent vassal will become autonomous.
		if = {
			limit = {
				has_variable = vassal_role_var
				OR = {
					vassal_contract_obligation_level:vassal_role = 0 # Autonomous
					vassal_contract_obligation_level:vassal_role = 2 # Autonomous
				}
				OR = {
					var:vassal_role_var = 1 # Dependent city state.
					var:vassal_role_var = 3 # Dependent coalition.
				}
			}
			save_scope_value_as = { name = dependent_will_become_autonomous value = yes }
		} else = {
			save_scope_value_as = { name = dependent_will_become_autonomous value = no }
		}

		# Check whether an autonomous vassal will become dependent.
		if = {
			limit = {
				has_variable = vassal_role_var
				OR = {
					vassal_contract_obligation_level:vassal_role = 1 # Dependent
					vassal_contract_obligation_level:vassal_role = 3 # Dependent
				}
				OR = {
					var:vassal_role_var = 0 # Autonomous city state.
					var:vassal_role_var = 2 # Autonomous coalition.
				}
			}
			save_scope_value_as = { name = autonomous_will_become_dependent value = yes }
		} else = {
			save_scope_value_as = { name = autonomous_will_become_dependent value = no }
		}

		# Finally clear the settings, since we no longer need them.
		clear_vassal_contract_settings = yes
	}

	$LIEGE$ = {
		save_scope_as = vassal_contract_liege
		trigger_event = { on_action = vassal_contract_change }
	}
}

# Saves the vassal contracts of this character to variables.
save_vassal_contract_settings = {
	_pvt_save_vassal_contract_setting = { CONTRACT = feudal_government_taxes }
	_pvt_save_vassal_contract_setting = { CONTRACT = feudal_government_levies }
	_pvt_save_vassal_contract_setting = { CONTRACT = religious_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = atha_fortification_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = coinage_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = succession_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = war_declaration_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = council_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = title_revocation_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = vassal_role }
	_pvt_save_vassal_contract_setting = { CONTRACT = imposed_franchise }
	_pvt_save_vassal_contract_setting = { CONTRACT = enforced_centralisation }
	_pvt_save_vassal_contract_setting = { CONTRACT = enforced_federalism }
	_pvt_save_vassal_contract_setting = { CONTRACT = garrison_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = ritual_coronations_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = colony_rights }
	_pvt_save_vassal_contract_setting = { CONTRACT = gift_estate_rights }
#	_pvt_save_vassal_contract_setting = { CONTRACT = hereditary_rights }
}

# Saves the vassal contracts of CHAR to THIS character.
# CHAR is the character that is currently affected by the contracts.
save_vassal_contract_settings_of_character = {
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = feudal_government_taxes }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = feudal_government_levies }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = religious_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = atha_fortification_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = coinage_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = succession_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = war_declaration_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = council_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = title_revocation_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = vassal_role }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = imposed_franchise }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = enforced_centralisation }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = enforced_federalism }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = garrison_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = ritual_coronations_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = colony_rights }
	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = gift_estate_rights }
#	_pvt_save_vassal_contract_setting_for_char = { CHAR = $CHAR$ CONTRACT = hereditary_rights }
}

# Applies saved vassal contract settings to THIS character.
apply_vassal_contract_settings = {
	_pvt_apply_vassal_contract_setting = { CONTRACT = feudal_government_taxes }
	_pvt_apply_vassal_contract_setting = { CONTRACT = feudal_government_levies }
	_pvt_apply_vassal_contract_setting = { CONTRACT = religious_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = atha_fortification_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = coinage_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = succession_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = war_declaration_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = council_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = title_revocation_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = vassal_role }
	_pvt_apply_vassal_contract_setting = { CONTRACT = imposed_franchise }
	_pvt_apply_vassal_contract_setting = { CONTRACT = enforced_centralisation }
	_pvt_apply_vassal_contract_setting = { CONTRACT = enforced_federalism }
	_pvt_apply_vassal_contract_setting = { CONTRACT = garrison_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = ritual_coronations_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = colony_rights }
	_pvt_apply_vassal_contract_setting = { CONTRACT = gift_estate_rights }
#	_pvt_apply_vassal_contract_setting = { CONTRACT = hereditary_rights }
}

# Clears saved vassal contract settings from THIS character.
clear_vassal_contract_settings = {
	_pvt_clear_vassal_contract_setting = { CONTRACT = feudal_government_taxes }
	_pvt_clear_vassal_contract_setting = { CONTRACT = feudal_government_levies }
	_pvt_clear_vassal_contract_setting = { CONTRACT = religious_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = atha_fortification_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = coinage_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = succession_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = war_declaration_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = council_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = title_revocation_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = vassal_role }
	_pvt_clear_vassal_contract_setting = { CONTRACT = imposed_franchise }
	_pvt_clear_vassal_contract_setting = { CONTRACT = enforced_centralisation }
	_pvt_clear_vassal_contract_setting = { CONTRACT = enforced_federalism }
	_pvt_clear_vassal_contract_setting = { CONTRACT = garrison_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = ritual_coronations_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = colony_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = gift_estate_rights }
	_pvt_clear_vassal_contract_setting = { CONTRACT = enforced_federalism }
#	_pvt_clear_vassal_contract_setting = { CONTRACT = hereditary_rights }
}

# Changes government while keeping vassal contract settings.
# GOVERNMENT is the government that it should change to.
change_government_form = {
	# Save the vassal contract settings.
	save_vassal_contract_settings = yes

	# Change the government.
	change_government = $GOVERNMENT$

	# Fix the contracts again.
	apply_vassal_contract_settings = yes
	clear_vassal_contract_settings = yes

	# Trigger the government changed on action.
	trigger_event = { on_action = government_change }
}

# Changes government, while keeping vassal contract settings, of a specific character.
# GOVERNMENT is the government that it should change to.
# CHAR is the holder of the contract.
change_government_form_for_character = {
	# Save the vassal contract settings.
	save_vassal_contract_settings_of_character = { CHAR = $CHAR$ }

	# Change the government.
	change_government = $GOVERNMENT$

	# Fix the contracts again.
	apply_vassal_contract_settings = yes
	clear_vassal_contract_settings = yes

	# Trigger the government changed on action.
	trigger_event = { on_action = government_change }
}

# Private functions

# Saves a single vassal contract of this character and saves it to a variable.
# CONTRACT is the id of the vassal contract category to store.
_pvt_save_vassal_contract_setting = {
	if = {
		limit = { vassal_contract_has_flag = category_$CONTRACT$ }
		set_variable = {
			name = $CONTRACT$_var
			value = vassal_contract_obligation_level:$CONTRACT$
		}
	}
}

# Saves a single vassal contract of CHAR to THIS character in a variable.
# CHAR is the character that is currently affected by the contracts.
# CONTRACT is the id of the vassal contract category to store.
_pvt_save_vassal_contract_setting_for_char = {
	if = {
		limit = { $CHAR$ = { vassal_contract_has_flag = category_$CONTRACT$ } }
		set_variable = {
			name = $CONTRACT$_var
			value = $CHAR$.vassal_contract_obligation_level:$CONTRACT$
		}
	}
}

# Applies a single saved vassal contract setting to THIS character.
# CONTRACT is the id of the vassal contract category to apply.
_pvt_apply_vassal_contract_setting = {
	if = {
		limit = { has_variable = $CONTRACT$_var }
		set_obligation_value_if_changed_effect = { OBLIGATION_TYPE = $CONTRACT$ VALUE = var:$CONTRACT$_var }
	}
}

# Clears a single saved vassal contract settings from THIS character.
# CONTRACT is the id of the vassal contract category to clear.
_pvt_clear_vassal_contract_setting = {
	if = {
		limit = { has_variable = $CONTRACT$_var }
		remove_variable = $CONTRACT$_var
	}
}

invalidated_contract_notification_effect = {
	# Ritual Coronations, Fortification Rights & Garrison Rights
	if = {
		limit = {
			exists = local_var:vassal_role
			local_var:vassal_role >= 4
		}
		if = {
			limit = { 
				exists = local_var:ritual_coronations_rights
				local_var:ritual_coronations_rights = 1
			}
			custom_description = {
				text = "vassal_contract_ritual_coronations_rights_invalidated"				
			}
		}
		if = {
			limit = { 
				exists = local_var:atha_fortification_rights
				local_var:atha_fortification_rights = 1
			}
			custom_description = {
				text = "vassal_contract_fortification_rights_invalidated"			
			}
		}
		if = {
			limit = { 
				exists = local_var:garrison_rights
				local_var:garrison_rights = 1
			}
			custom_description = {
				text = "vassal_contract_garrison_rights_invalidated"				
			}
		}
	}
	# Colony Rights
	if = {
		limit = {
			exists = local_var:vassal_role
			local_var:vassal_role <= 4
		}
		if = {
			limit = { 
				exists = local_var:colony_rights
				local_var:colony_rights = 1
			}
			custom_description = {
				text = "vassal_contract_colony_rights_invalidated"				
			}
		}
	}
	# Imposed Franchise
	if = {
		limit = {
			exists = local_var:vassal_role
			local_var:vassal_role >= 2
		}
		if = {
			limit = { 
				exists = local_var:imposed_franchise
				local_var:imposed_franchise >= 1
			}
			custom_description = {
				text = "vassal_contract_imposed_franchise_invalidated"				
			}
		}
	}
	# Imposed Centralisation & Federalism
	if = {
		limit = {
			exists = local_var:vassal_role
			OR = {
				local_var:vassal_role <= 1
				local_var:vassal_role >= 4
			}
		}
		if = {
			limit = { 
				exists = local_var:enforced_centralisation
				local_var:enforced_centralisation >= 1
			}
			custom_description = {
				text = "vassal_contract_enforced_centralisation_invalidated"				
			}
		}
		if = {
			limit = { 
				exists = local_var:enforced_federalism
				local_var:enforced_federalism >= 1
			}
			custom_description = {
				text = "vassal_contract_enforced_federalism_invalidated"				
			}
		}
	}
}

set_autonomous_contracts_effect = {
	if = {
		limit = {
			vassal_contract_has_flag = has_imposed_franchise
		}
		vassal_contract_set_obligation_level = {
			type = imposed_franchise
			level = obligation_level_imposed_franchise_none
		}
	}
	if = {
		limit = { vassal_contract_has_flag = has_enforced_centralisation }

		vassal_contract_set_obligation_level = {
			type = enforced_centralisation
			level = obligation_level_enforced_centralisation_none
		}
	}
	if = {
		limit = { vassal_contract_has_flag = has_enforced_federalism }

		vassal_contract_set_obligation_level = {
			type = enforced_federalism
			level = obligation_level_enforced_federalism_none
		}
	}
	vassal_contract_set_obligation_level = {
		type = coinage_rights
		level = obligation_level_coinage_rights_granted
	}
	vassal_contract_set_obligation_level = {
		type = religious_rights
		level = obligation_level_religious_rights_protected
	}
	vassal_contract_set_obligation_level = {
		type = title_revocation_rights
		level = obligation_level_title_revocation_rights_protected
	}
	vassal_contract_set_obligation_level = {
		type = garrison_rights
		level = obligation_level_garrison_rights_none
	}
}