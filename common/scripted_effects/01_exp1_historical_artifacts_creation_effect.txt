# Historical Artifacts Creation #

set_artifact_rarity_common = {
	save_scope_value_as = {
		name = quality
		value = 15
	}
	save_scope_value_as = {
		name = wealth
		value = 15
	}
}

set_artifact_rarity_masterwork = {
	save_scope_value_as = {
		name = quality
		value = 30
	}
	save_scope_value_as = {
		name = wealth
		value = 30
	}
}

set_artifact_rarity_famed = {
	save_scope_value_as = {
		name = quality
		value = 70
	}
	save_scope_value_as = {
		name = wealth
		value = 70
	}
}

set_artifact_rarity_illustrious = {
	save_scope_value_as = {
		name = quality
		value = 100
	}
	save_scope_value_as = {
		name = wealth
		value = 100
	}
}

create_artifact_pedestal_christian_relic_effect_hist = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
}

create_artifact_pedestal_buddhism_relic_effect_hist = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
}

create_artifact_pedestal_branch_relic_zoroastr_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_illustrious = yes

	# Identify which relic it is
	random_list = {
		10 = {
			save_scope_value_as = {
				name = branch_name
				value = flag:haoma
			}
		}
		10 = {
			save_scope_value_as = {
				name = branch_name
				value = flag:cypress
			}
		}
	}

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_branch_name
		description = artifact_pedestal_branch_description
		type = pedestal
		visuals = pedestal_branch_relic_zoroastr
		wealth = scope:wealth
		quality = scope:quality
		template = branch_zoroastr_template
		history = {
			type = created_before_history
		}
		modifier = artifact_placeholder_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = {
			name = relic
			value = flag:zoroastr
		}
		add_scaled_artifact_modifier_piety_effect = yes
		add_scaled_artifact_modifier_grandeur_small_effect = yes
		if = {
			limit = {
				OR = {
					rarity = famed
					rarity = illustrious
				}
			}
			add_2_scaled_artifact_modifier_devotion_effect = yes
			
		}
		else = {
			add_scaled_artifact_modifier_devotion_effect = yes
		}
		add_artifact_modifier = artifact_monthly_prestige_penalty_modifier #overwrite default creation modifier
		save_scope_as = epic
	}
}

create_artifact_pedestal_branch_relic_germanic_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_illustrious = yes

	# Identify which relic it is
	random_list = {
		10 = {
			save_scope_value_as = {
				name = branch_name
				value = flag:thor
			}
		}
		10 = {
			save_scope_value_as = {
				name = branch_name
				value = flag:uppsala
			}
		}
	}

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_branch_name
		description = artifact_pedestal_branch_description
		type = pedestal
		template = branch_germanic_template
		visuals = pedestal_branch_relic_germanic
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = artifact_placeholder_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = {
			name = relic
			value = flag:germanic
		}
		add_scaled_artifact_modifier_piety_effect = yes
		add_scaled_artifact_modifier_grandeur_small_effect = yes
		if = {
			limit = {
				OR = {
					rarity = famed
					rarity = illustrious
				}
			}
			add_2_scaled_artifact_modifier_devotion_effect = yes
			
		}
		else = {
			add_scaled_artifact_modifier_devotion_effect = yes
		}
		save_scope_as = epic
	}
}

create_artifact_pedestal_branch_relic_slavic_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_illustrious = yes

	save_scope_value_as = {
		name = branch_name
		value = flag:alatyr
	}

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_branch_name
		description = artifact_pedestal_branch_description
		type = pedestal
		template = branch_slavic_template
		visuals = pedestal_branch_relic_slavic
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = artifact_placeholder_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = {
			name = relic
			value = flag:slavic
		}
		add_scaled_artifact_modifier_piety_effect = yes
		add_scaled_artifact_modifier_grandeur_small_effect = yes
		if = {
			limit = {
				OR = {
					rarity = famed
					rarity = illustrious
				}
			}
			add_2_scaled_artifact_modifier_devotion_effect = yes
			
		}
		else = {
			add_scaled_artifact_modifier_devotion_effect = yes
		}
		save_scope_as = epic
	}
}

create_artifact_pedestal_branch_relic_boog_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_illustrious = yes

	save_scope_value_as = {
		name = branch_name
		value = flag:somb
	}

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_branch_name
		description = artifact_pedestal_branch_description
		type = pedestal
		template = branch_boog_template
		visuals = pedestal_branch_relic_boog
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = artifact_placeholder_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = {
			name = relic
			value = flag:boog
		}
		add_scaled_artifact_modifier_piety_effect = yes
		add_scaled_artifact_modifier_grandeur_small_effect = yes
		if = {
			limit = {
				OR = {
					rarity = famed
					rarity = illustrious
				}
			}
			add_2_scaled_artifact_modifier_devotion_effect = yes
			
		}
		else = {
			add_scaled_artifact_modifier_devotion_effect = yes
		}
		add_artifact_modifier = artifact_monthly_prestige_penalty_modifier #overwrite default creation modifier
		save_scope_as = epic
	}
}

create_artifact_pedestal_branch_relic_hinduism_effect = {
	# TODO: Readd once hindus are added.
}

create_artifact_pedestal_branch_relic_general_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	set_artifact_rarity_illustrious = yes

	save_scope_value_as = {
		name = branch_name
		value = flag:general
	}

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_branch_name
		description = artifact_pedestal_branch_description
		type = pedestal
		template = branch_general_template
		visuals = pedestal_branch_relic_hinduism
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = artifact_placeholder_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = {	#This is needed to determine what religion the branch will work for.
			name = relic_religion
			value = $RELIGION$
		}
		set_variable = { name = historical_unique_artifact value = yes }
		add_scaled_artifact_modifier_piety_effect = yes
		add_scaled_artifact_modifier_grandeur_small_effect = yes
		if = {
			limit = {
				OR = {
					rarity = famed
					rarity = illustrious
				}
			}
			add_2_scaled_artifact_modifier_devotion_effect = yes
			
		}
		else = {
			add_scaled_artifact_modifier_devotion_effect = yes
		}
		save_scope_as = epic
	}
}

#Common Artifacts

create_artifact_makarakundala_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection

	set_artifact_rarity_famed = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_makarakundala_name
		description = artifact_makarakundala_description
		type = pedestal
		visuals = riches
		wealth = scope:wealth
		quality = scope:quality
		template = general_unique_template
		history = {
			type = created_before_history
		}
		modifier = makarakundala_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = makarakundala
		add_scaled_artifact_modifier_devotion_effect = yes
		save_scope_as = epic
	}
}

#Masterwork Artifacts

create_artifact_ibeji_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_masterwork = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_ibeji_name
		description = artifact_ibeji_description
		template = general_unique_template
		type = pedestal
		visuals = medium_box
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = ibeji_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = ibeji
		add_scaled_artifact_modifier_devotion_effect = yes
		save_scope_as = epic
	}
}

create_artifact_chinese_caligraphy_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_masterwork = yes

	# Create the artifact
	create_artifact = {
		type = pedestal
		visuals = scroll
		wealth = scope:wealth
		template = general_unique_template
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = caligraphy_modifier
		save_scope_as = newly_created_artifact
		name = artifact_chinese_caligraphy_name
		description = artifact_chinese_caligraphy_description
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = chinese_caligraphy
		add_2_scaled_artifact_modifier_rulership_effect = yes
		save_scope_as = epic
	}
}

create_artifact_throne_solomon_effect = {
	# TODO: Readd after Israelites are added
}

create_artifact_ruyi_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_masterwork = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_ruyi_name
		description = artifact_ruyi_description
		type = pedestal
		visuals = regalia_court
		wealth = scope:wealth
		quality = scope:quality
		template = general_unique_template
		history = {
			type = created_before_history
		}
		modifier = ruyi_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = ruyi
		save_scope_as = epic
	}
}

create_artifact_jewelled_danda_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_masterwork = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_jewelled_danda_name
		description = artifact_jewelled_danda_description
		type = regalia_simple
		visuals = regalia
		wealth = scope:wealth
		quality = scope:quality
		template = general_unique_template
		history = {
			type = created_before_history
		}
		modifier = jewelled_danda_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		add_2_scaled_artifact_modifier_rulership_effect = yes
		add_scaled_artifact_modifier_scholarship_effect = yes
		set_variable = danda
		save_scope_as = epic
	}
}

create_artifact_khanda_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_masterwork = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_khanda_name
		description = artifact_khanda_description
		template = branch_hinduism_template
		type = pedestal
		visuals = wall_khanda_sword
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = khanda_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = khanda
		set_variable = {
			name = relic
			value = flag:hinduism
		}
		save_scope_as = epic
	}
}

create_artifact_zomorrodnegar_effect = {
	# TODO: Readd after Israelites are added
}

create_artifact_aruval_effect = {
	# TODO: Readd once hindus are added.
}

create_artifact_navaratna_effect = {
	# TODO: Readd once hindus are added.
}

create_artifact_pedestal_ikenga_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_masterwork = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_ikenga_name
		description = artifact_ikenga_description
		type = pedestal
		visuals = small_box
		wealth = scope:wealth
		quality = scope:quality
		template = general_unique_template
		history = {
			type = created_before_history
		}
		modifier = ikenga_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = ikenga
		save_scope_as = epic
	}
}

create_artifact_afarganyu_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = afarganyu_name
		description = artifact_afarganyu_description
		template = branch_zoroastr_template
		type = urn
		visuals = urn
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = afarganyu_modifier
		save_scope_as = newly_created_artifact
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = {
			name = relic
			value = flag:zoroastr
		}
		save_scope_as = epic
	}
}

create_artifact_siddhachakra_effect = {
	# TODO: Readd once Jains are added.
}

create_artifact_staff_kakusandha_effect = {
	# TODO: Readd once buddhists are added.
}

create_artifact_konagamana_effect = {
	# TODO: Readd once buddhists are added.
}

create_artifact_robe_kassapa_effect = {
	# TODO: Readd once buddhists are added.
}

#Famed Artifacts

create_artifact_cintamani_hindu_effect = {
	# TODO: Readd once hindus are added.
}

create_artifact_cintamani_buddhist_effect = {
	# TODO: Readd once buddhists are added.
}

create_artifact_bronze_head_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_famed = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_bronze_head_name
		description = artifact_bronze_head_description
		type = pedestal
		visuals = head
		wealth = scope:wealth
		quality = scope:quality
		template = general_unique_template
		history = {
			type = created_before_history
		}
		modifier = bronze_head_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = bronze_head
		save_scope_as = epic
	}
}

create_artifact_crystal_carving_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_famed = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_crystal_carving_name
		description = artifact_crystal_carving_description
		type = pedestal
		visuals = riches
		wealth = scope:wealth
		quality = scope:quality
		template = general_unique_template
		history = {
			type = created_before_history
		}
		modifier = crystal_carving_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = crystal_carving
		save_scope_as = epic
	}
}

create_artifact_wall_sword_attila_effect = {
}

create_artifact_pedestal_great_diamond_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_famed = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_great_diamond_name
		description = artifact_pedestal_great_diamond_description
		type = pedestal
		template = general_unique_template
		visuals = diamond
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = great_diamond_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = great_diamond
		save_scope_as = epic
	}
}

create_artifact_pedestal_cup_jamshid_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_pedestal_jamshid_name
		description = artifact_pedestal_cup_jamshid
		type = pedestal
		template = cup_jamshid_template
		visuals = pedestal_cup_jamshid
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = cup_jamshid_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = cup_jamshid
		save_scope_as = epic
	}
}

create_artifact_pedestal_shankha_conch_effect = {
	# TODO: Readd after Hindus are added.
}

create_artifact_dhammapada_effect = {
	# TODO: Readd after Buddhists are added.
}

create_artifact_vinaya_pitaka_effect = {
	# TODO: Readd after Buddhists are added.
}

create_artifact_sutta_pitaka_effect = {
	# TODO: Readd after Buddhists are added.
}

create_artifact_abhidhamma_pitaka_effect = {
	# TODO: Readd after Buddhists are added.
}

#Illustrious Artifacts

create_artifact_pedestal_david_harp_effect = {
	# TODO: Readd after Israelites are added
}

create_artifact_sculpture_ark_of_covenant_effect = {
	# TODO: Readd after Israelites are added
}

create_artifact_arms_of_alexander_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {	
		name = artifact_arms_of_alex_name
		description = artifact_arms_of_alex_description
		template = general_unique_template
		type = pedestal
		visuals = pedestal_alexander_armor
		wealth = scope:wealth
		quality = scope:quality
		history = {
			type = created_before_history
		}
		modifier = alexander_the_great_armor_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = arms_of_alex
		save_scope_as = epic
	}
}

create_artifact_turquoise_throne_effect = {
	# Get the character the artifact is being made for.
	$OWNER$ = { save_scope_as = owner }
	# Not really used, but if we don't set the scopes we get errors in the feature selection
	set_artifact_rarity_illustrious = yes

	# Create the artifact
	create_artifact = {
		type = throne_special
		template = general_unique_template
		visuals = throne_turquoise
		wealth = scope:wealth
		quality = scope:quality
		name = turquoise_throne_name
		description = turquoise_throne_description
		history = {
			type = created_before_history
		}
		modifier = turquoise_throne_modifier
		save_scope_as = newly_created_artifact
		decaying = no
	}

	scope:newly_created_artifact = {
		set_variable = { name = historical_unique_artifact value = yes }
		set_variable = turquoise_throne
		save_scope_as = epic
	}
}
