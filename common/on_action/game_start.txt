# Empty scope
on_game_start = {
	events = {
		#Guaranteed historical artifacts fixed spawning
		debug_portraits.1 					# Debug portraits for animation testing
	}

	effect = {
		religion:zoroastrianism_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_fire_temple_01
					}
				}
			}
		}
		every_religion_global = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_other_grand_temple_01
					}
				}
			}
		}
		
		### GRANDEUR ###
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}

		# Set up anyone who should be in a regency at start whether we have sources or not.
		## If you start as a child, incapable, or imprisoned, you get a regency.
		every_ruler = {
			limit = {
				OR = {
					is_adult = no
					is_incapable = yes
					is_imprisoned = yes
					government_has_flag = government_is_clan
				}
			}
			# We don't want to check over so many characters *twice*, so we check again inside the block to determine what type of regency to put 'em in.
			## Temporary Regencies.
			if = {
				limit = { is_imprisoned = yes }
				trigger_event = {
					id = diarchy.0001
					delayed = yes
				}
			}
			if = {
				limit = { government_has_flag = government_is_clan }
			}
			## Entrenched Regencies.
			else = {
				trigger_event = {
					id = diarchy.0011
					delayed = yes
				}
			}
		}
		### DEBUG GLOBAL VARIABLES ###
		# We set these here so that they present nicely and you can see when some variables register zero.

		# FP3 Struggle.
		if = {
			limit = { gather_debug_variables_for_persian_struggle_trigger = yes }
			# ENDING
			set_global_variable = {
				name = sp_end_date
				value = 0
			}
			# There's also fp3_struggle_ending; we don't track that here because it has functional usage that depends on it existing or not, so it's not a debug variable.

			# PHASES
			set_global_variable = {
				name = sp_phase_unrest
				value = 0
			}
			set_global_variable = {
				name = sp_phase_stabil
				value = 0
			}
			
			# UNREST
			set_global_variable = {
				name = sp_unrest_catalyst_yearly_influential_house_is_antagonistic_major
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_yearly_influential_house_is_antagonistic_medium
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_yearly_influential_house_is_antagonistic_minor
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_yearly_influential_house_is_antagonistic_minimal
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_becomes_rival_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_gain_claim_on_title_fp3
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_usurp_title_fp3
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_cadet_branch_created
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_supporter_forced_conversion
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_execute_supporter
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_imprison_supporter
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_unnatural_death_supporter
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_reveal_secret_supporter
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_turn_supporter_into_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_forming_alliance_between_detractor_uninvolved_rulers
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_detractor_win_unfair_war_within_the_region
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_detractor_win_fair_war_within_the_region
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_detractor_declare_unfair_war_within_the_region
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_detractor_declare_fair_war_within_the_region
				value = 0
			}
			set_global_variable = {
				name = sp_unrest_catalyst_became_detractor_fp3
				value = 0
			}
			# STABILISATION
			set_global_variable = {
				name = sp_stabil_catalyst_yearly_influential_house_is_harmonious_major
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_yearly_influential_house_is_harmonious_medium
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_yearly_influential_house_is_harmonious_minor
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_yearly_influential_house_is_harmonious_minimal
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_learned_new_language_important
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_vassalize_independent_ruler
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_invite_involved_as_honorary_guests_to_feast_hunt
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_supporter_win_unfair_war_within_the_region
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_supporter_win_fair_war_within_the_region
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_supporter_declare_unfair_war_within_the_region
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_supporter_declare_fair_war_within_the_region
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_install_loyalist_cb
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_imprison_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_execute_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_unnatural_death_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_reveal_secret_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_detractor_forced_conversion
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_turn_detractor_into_supporter
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_gain_struggle_titles_from_interlopers_uninvolved
				value = 0
			}
			set_global_variable = {
				name = sp_stabil_catalyst_became_supporter_fp3
				value = 0
			}
			# CONCESSION
			set_global_variable = {
				name = sp_concession_catalyst_missing_caliphate_or_arabian_empire
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_caliph_or_emperor_loses_revolt_war
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_caliph_or_emperor_accepts_faction_demands
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_caliph_died_violently
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_caliph_died_naturally
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_war_ends_in_white_peace_between_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_became_best_friend_soulmate_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_became_friend_lover_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_forming_alliance_between_supporter_detractor_rulers
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_abandon_hook_on_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_grants_pardon_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_release_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_ransom_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_grants_vassal_to_de_jure_liege_supporter_detractor
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_gift_supporter_detractor_ruler
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_interloper_uninvolved_gain_struggle_titles
				value = 0
			}
			set_global_variable = {
				name = sp_concession_catalyst_raided_involved
				value = 0
			}
		}
	}

	on_actions = {
		ATHA_on_game_start
	}
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		# Make sure that Realm Priests are landed theocrats where it makes sense
		every_ruler = {
			limit = {
				highest_held_title_tier >= tier_duchy
			}
			if = {
				limit = {
					exists = cp:councillor_court_chaplain
					cp:councillor_court_chaplain = {
						is_ruler = no
					}
					faith = { has_doctrine = doctrine_clerical_succession_spiritual_fixed_appointment }
					any_vassal = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
				}
				random_vassal = {
					limit = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
					weight = {
						base = 1
						modifier = {
							add = 1000
							faith.religious_head ?= this
						}
						modifier = {
							add = learning
						}
						modifier = {
							add = primary_title.tier
						}
					}
					liege = {
						assign_councillor_type = {
							type = councillor_court_chaplain
							remove_existing_councillor = yes
							target = prev
						}
					}
				}
			}
		}
	
		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}
		else = { # So that children 10+ starts with a sexuality
			child_sexuality_distribution_effect = yes
		}

		# Give Ruler Designer characters regencies.
		every_in_global_list = {
			variable = rd_chars_needing_regencies
			trigger_event = diarchy.0011
			# Aaaand clean the list.
			save_temporary_scope_as = char_temp
			remove_list_global_variable = {
				name = rd_chars_needing_regencies
				target = scope:char_temp
			}
		}

		### ACHIEVEMENT: FROM RAGS TO RICHES
		every_player = {
			limit = { highest_held_title_tier = tier_county }
			add_achievement_global_variable_effect = {
				VARIABLE = achievement_rags_to_riches_valid
				VALUE = yes
			}
		}

		### HOLD COURT STARTING GRACE
		every_character_with_royal_court = {
			set_variable = {
				name = hold_court_cooldown
	 			days = standard_hold_court_cooldown_time
	 		}
		}
	}

	events = {
		game_rule.1000	#Autopopulate families.
		historical_artifacts.0023			# Historical Artifacts Generator
	}

	on_actions = {
		ATHA_on_game_start_after_lobby
	}
}
