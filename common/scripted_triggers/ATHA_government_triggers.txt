### Used for building requirements 

can_build_tribal = {
	government_has_flag = is_tribal_government
}

### Liege contract modification triggers

can_create_dependent_vassals = {
	custom_description = {
		text = "can_create_dependent_vassals"
		NOR = {
			has_government = federal_alliance_government
			has_government = amphictyony_government
			has_government = tribal_government
		}	
	}
}

can_create_bureaucratic_vassals = {
	custom_description = {
		text = "can_create_bureaucratic_vassals"
		NOR = {
			has_government = federal_alliance_government
			has_government = federal_sympolity_government
			has_government = amphictyony_government
			has_government = tribal_government
			has_government = clan_government
		}
	}	
}

can_enforce_ritual_coronations = {
	NOR = {
		government_has_flag = is_federal_government
		has_government = city_state_democratic_government
		has_government = city_state_oligarchic_government
	}	
}

can_enforce_obligations = {
	NOR = {
		has_government = federal_alliance_government
		has_government = amphictyony_government
	}	
}

can_grant_gift_estates = {
	NOR = {
		government_has_flag = is_coalition_government
		has_government = city_state_democratic_government
		has_government = city_state_oligarchic_government
	}	
}

### Game-start vassal contract triggers

should_start_with_dependent_role = {
	liege = { 
		OR = {
			has_government = hegemonic_league_government
			has_government = feudal_government
		}
	}
}

should_start_with_colony_rights = {
	OR = {
		has_government = bureaucracy_military_government
		has_government = feudal_government
	}
	any_realm_province = {
		has_holding_type = colony_holding
	}
}

### Compatibility triggers for modifying vassal contract

vassal_contract_compatibility_trigger = {
	# Make it impossible to modify coinage rights when an autonomous contract is selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:coinage_rights
				local_var:coinage_rights != scope:obligation_check.vassal_contract_obligation_level:coinage_rights
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_coinage_rights_city_state"
			local_var:vassal_role != contract_vassal_role_city_state_autonomous
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_coinage_rights_coalition"
			local_var:vassal_role != contract_vassal_role_coalition_autonomous
		}
	}
	# Make it impossible to modify religious rights when an autonomous contract is selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:religious_rights
				local_var:religious_rights != scope:obligation_check.vassal_contract_obligation_level:religious_rights
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_religious_rights_city_state"
			local_var:vassal_role != contract_vassal_role_city_state_autonomous
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_religious_rights_coalition"
			local_var:vassal_role != contract_vassal_role_coalition_autonomous
		}
	}
	# Make it impossible to modify title revocation rights when an autonomous contract is selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:title_revocation_rights
				local_var:title_revocation_rights != scope:obligation_check.vassal_contract_obligation_level:title_revocation_rights
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_title_revocation_rights_city_state"
			local_var:vassal_role != contract_vassal_role_city_state_autonomous
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_title_revocation_rights_coalition"
			local_var:vassal_role != contract_vassal_role_coalition_autonomous
		}
	}
	# Make it impossible to modify garrison rights when an autonomous contract is selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:garrison_rights
				local_var:garrison_rights != scope:obligation_check.vassal_contract_obligation_level:garrison_rights
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_garrison_rights_city_state"
			local_var:vassal_role != contract_vassal_role_city_state_autonomous
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_garrison_rights_coalition"
			local_var:vassal_role != contract_vassal_role_coalition_autonomous
		}
	}
	# Make it impossible to modify ritual coronations, fortification rights and garrison rights when a bureaucratic contract is selected.
	trigger_if = {
		limit = {
			exists = local_var:vassal_role
			local_var:vassal_role >= contract_vassal_role_bureaucracy_civil
		}
		trigger_if = {
			limit = { exists = local_var:ritual_coronations_rights }
			custom_description = {
				text = "vassal_contract_cannot_modify_ritual_coronations_rights_bureaucracy"
				local_var:ritual_coronations_rights = scope:obligation_check.vassal_contract_obligation_level:ritual_coronations_rights
			}
		}
		trigger_if = {
			limit = { exists = local_var:atha_fortification_rights }
			custom_description = {
				text = "vassal_contract_cannot_modify_fortification_rights_bureaucracy"
				local_var:atha_fortification_rights = scope:obligation_check.vassal_contract_obligation_level:atha_fortification_rights
			}
		}
		trigger_if = {
			limit = { exists = local_var:garrison_rights }
			custom_description = {
				text = "vassal_contract_cannot_modify_garrison_rights_bureaucracy"
				local_var:garrison_rights = scope:obligation_check.vassal_contract_obligation_level:garrison_rights
			}
		}
	}
	# Make it impossible to modify colony rights for when civil bureaucracy, coalition or city state contracts are selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:colony_rights
				local_var:colony_rights != scope:obligation_check.vassal_contract_obligation_level:colony_rights
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_colony_rights_bureaucracy_civil"
			local_var:vassal_role != contract_vassal_role_bureaucracy_civil
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_colony_rights_coalition"
			NOR = {
				local_var:vassal_role = contract_vassal_role_coalition_autonomous
				local_var:vassal_role = contract_vassal_role_coalition_dependent
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_colony_rights_city_state"
			NOR = {
				local_var:vassal_role = contract_vassal_role_city_state_autonomous
				local_var:vassal_role = contract_vassal_role_city_state_dependent
			}
		}
	}
	# Make it impossible to modify imposed franchise when non-city state contracts are selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:imposed_franchise
				local_var:imposed_franchise != scope:obligation_check.vassal_contract_obligation_level:imposed_franchise
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_imposed_franchise_bureaucracy"
			local_var:vassal_role < contract_vassal_role_bureaucracy_civil
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_imposed_franchise_coalition"
			NOR = {
				local_var:vassal_role = contract_vassal_role_coalition_autonomous
				local_var:vassal_role = contract_vassal_role_coalition_dependent
			}
		}
	}
	# Make it impossible to select an imposed franchise other than democratic when the autonomous city state contract is selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:imposed_franchise
				local_var:vassal_role = contract_vassal_role_city_state_autonomous
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_imposed_franchise_city_state_autonomous"
			local_var:imposed_franchise <= contract_imposed_franchise_democratic
		}
	}
	# Make it impossible to modify enforced centralisation when bureaucracy or city state contracts are selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:enforced_centralisation
				local_var:enforced_centralisation != scope:obligation_check.vassal_contract_obligation_level:enforced_centralisation
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_enforced_centralisation_bureaucracy"
			local_var:vassal_role < contract_vassal_role_bureaucracy_civil
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_enforced_centralisation_city_state"
			NOT = { local_var:vassal_role <= contract_vassal_role_city_state_dependent }
		}
	}
	# Make it impossible to modify enforced federalism when bureaucracy or city state contracts are selected.
	trigger_if = {
		limit = {
			AND = {
				exists = local_var:vassal_role
				exists = local_var:enforced_federalism
				local_var:enforced_federalism != scope:obligation_check.vassal_contract_obligation_level:enforced_federalism
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_enforced_federalism_bureaucracy"
			local_var:vassal_role < contract_vassal_role_bureaucracy_civil
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_enforced_federalism_city_state"
			NOT = { local_var:vassal_role <= contract_vassal_role_city_state_dependent }
		}
	}
	# Make it impossible to modify enforced federalism and enforced centralisation to anything other than federal & low when autonomous coalition contract is selected.
	trigger_if = {
		limit = {
			exists = local_var:vassal_role
			local_var:vassal_role = contract_vassal_role_coalition_autonomous
			OR = {
				local_var:enforced_federalism != scope:obligation_check.vassal_contract_obligation_level:enforced_federalism
				local_var:enforced_centralisation != scope:obligation_check.vassal_contract_obligation_level:enforced_centralisation
			}
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_enforced_federalism_coalition_autonomous"
			local_var:enforced_federalism != contract_enforced_federalism_hegemonic
		}
		custom_description = {
			text = "vassal_contract_cannot_modify_enforced_centralisation_coalition_autonomous"
			local_var:enforced_centralisation < contract_enforced_centralisation_medium
		}
	}
}

# Checks whether the scoped character has the same government form as the one that is in the argument.
#	CHAR: The other character.
has_same_government_form_as = {
	OR = {
		AND = {
			has_government = feudal_government
			$CHAR$.has_government = feudal_government
		}
		AND = {
			has_government = republic_government
			$CHAR$.has_government = republic_government
		}
		AND = {
			has_government = theocracy_government
			$CHAR$.has_government = theocracy_government
		}
		AND = {
			has_government = tribal_government
			$CHAR$.has_government = tribal_government
		}
		AND = {
			has_government = mercenary_government
			$CHAR$.has_government = mercenary_government
		}
		AND = {
			has_government = holy_order_government
			$CHAR$.has_government = holy_order_government
		}
		AND = {
			has_government = bureaucracy_military_government
			$CHAR$.has_government = bureaucracy_military_government
		}
		AND = {
			has_government = bureaucracy_civil_government
			$CHAR$.has_government = bureaucracy_civil_government
		}
		AND = {
			has_government = city_state_democratic_government
			$CHAR$.has_government = city_state_democratic_government
		}
		AND = {
			has_government = city_state_tyrannical_government
			$CHAR$.has_government = city_state_tyrannical_government
		}
		AND = {
			has_government = city_state_oligarchic_government
			$CHAR$.has_government = city_state_oligarchic_government
		}
		AND = {
			has_government = city_state_aristocratic_government
			$CHAR$.has_government = city_state_aristocratic_government
		}
		AND = {
			has_government = city_state_spartan_government
			$CHAR$.has_government = city_state_spartan_government
		}
		AND = {
			has_government = federal_alliance_government
			$CHAR$.has_government = federal_alliance_government
		}
		AND = {
			has_government = federal_sympolity_government
			$CHAR$.has_government = federal_sympolity_government
		}
		AND = {
			has_government = federal_league_government
			$CHAR$.has_government = federal_league_government
		}
		AND = {
			has_government = amphictyony_government
			$CHAR$.has_government = amphictyony_government
		}
		AND = {
			has_government = hegemonic_alliance_government
			$CHAR$.has_government = hegemonic_alliance_government
		}
		AND = {
			has_government = hegemonic_sympolity_government
			$CHAR$.has_government = hegemonic_sympolity_government
		}
		AND = {
			has_government = hegemonic_league_government
			$CHAR$.has_government = hegemonic_league_government
		}
	}
}