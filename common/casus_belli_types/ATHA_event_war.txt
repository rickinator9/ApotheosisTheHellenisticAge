##########
# Special 'claim' CB used for Ionian Revolt decision.
# If victorious, the revolt leader gains independence and is given control over all land controlled by their former liege in the Ionia region.
##########

ionian_revolt_cb = {
	group = event

	allowed_for_character = {}

	allowed_against_character = {
		scope:attacker = {
			liege = scope:defender
		}
	}

	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ai_only_against_liege = yes

	#Configure war-score. This is a bit different to usual - the roles are effectively reversed, in the sense that the attacker can win entirely through battles (since we don't want the revolt armies heading over to Alexandria or Antioch) whilst the defender has to siege down the rebellious cities.
	defender_capital_gives_war_score = no
	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
	defender_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50

	valid_to_start = {
		always = no
	}
	
	cost = {}

	on_declaration = {
		on_declared_war = yes

		scope:attacker = {
			change_nick_the_bold_based_on_strength_ratio = { TARGET = scope:defender }
		}
	}
	
	on_invalidated = {
		#Allow the attacker (and others) to attempt a revolt in the future
		scope:attacker = { remove_character_flag = attempted_ionian_revolt }
		remove_list_global_variable = {
			name = unavailable_unique_decisions
			target = flag:ionian_revolt_decision
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ionian_revolt_cb_victory_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = ionian_revolt_cb_victory_desc_attacker
			}
			desc = ionian_revolt_cb_victory_desc
		}	
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			remove_character_flag = ai_should_not_transfer
		}
		
		#Make the revolt leader independent
		if = {
			limit = {
				scope:attacker = { is_independent_ruler = no }
			}
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = going_independent
				add_claim_on_loss = no
			}
			scope:attacker = {
				becomes_independent = {
					change = scope:going_independent
				}
			}
			resolve_title_and_vassal_change = scope:going_independent
		}

		#Attacker gets Ionian kingdom title
		scope:attacker = {
			# Create kingdom title
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_ionia = {
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change

			#Rename k_ionia title based on culture
			if = {
				limit = { 
					culture = { has_name_list = name_list_ionian }
				}
				# Rename the title to Ionie
				hidden_effect = {
					title:k_ionia = { set_title_name = cn_ionia_ionic }
				}
			}
			else_if = {
				limit = { 
					culture = { has_name_list = name_list_aeolian }
				}
				# Rename the title to Aiolis
				hidden_effect = {
					title:k_ionia = { set_title_name = d_aiolis }
				}
			}
			else_if = {
				limit = { 
					culture = { has_name_list = name_list_dorian }
				}
				# Rename the title to Doris
				hidden_effect = {
					title:k_ionia = { set_title_name = d_doris }
				}
			}
		}

		#You get all titles in the Ionia region
		custom_tooltip = ionian_revolt_cb_effect.tt.ionia

		#Vassals who sided with you join you or become independent
		custom_tooltip = ionian_revolt_cb_effect.tt.vassals

		#New vassals gain autonomous contracts
		custom_tooltip = ionian_revolt_cb_effect.tt.contracts

		#Maintenance event to handle title changes
		scope:defender = {
			trigger_event = anatolia_decisions.0011
			every_vassal_or_below = {
				limit = {
					OR = {
						any_realm_province = { geographical_region = custom_ionia }
						AND = {
							ionian_revolt_proximity_2_trigger = yes
							has_character_flag = ionian_revolt_joined_as_attacker
						}
					}
				}
				trigger_event = { # TODO - remove delay once notification events are complete
					id = anatolia_decisions.0011
					days = 2
				}
			}
		}

		# Enable additional decisions to form/liberate kingdoms on the Asian coast
		custom_tooltip = ionian_revolt_cb_effect.tt.decisions
		set_global_variable = {
			name = ionian_revolt_attempted
			value = yes
		}

		# Truce
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = standard_truce_duration_days
					war = root.war
					result = victory
				}
			}
		}

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		# Allow for future Ionian revolts
		remove_list_global_variable = {
			name = unavailable_unique_decisions
			target = flag:ionian_revolt_decision
		}
		# But set a cooldown
		set_global_variable = {
			name = ionian_revolt_cooldown
			value = yes
			years = ionian_revolt_cooldown_value
		}

		# Keep track of war wins / losses
		scope:attacker = { register_offensive_war_win_effect = yes }
		scope:defender = { register_defensive_war_loss_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ionian_revolt_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = ionian_revolt_cb_white_peace_desc_attacker
			}
			desc = ionian_revolt_cb_white_peace_desc
		}		
	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}
		scope:attacker = {
			remove_character_flag = ai_should_not_transfer
		}
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = standard_truce_duration_days
					war = root.war
					result = white_peace
				}
			}
		}

		scope:defender = {
			add_prestige = minor_prestige_value
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Enable additional decisions to form/liberate kingdoms on the Asian coast
		custom_tooltip = ionian_revolt_cb_effect.tt.decisions
		set_global_variable = {
			name = ionian_revolt_attempted
			value = yes
		}

		# Allow for future Ionian revolts
		remove_list_global_variable = {
			name = unavailable_unique_decisions
			target = flag:ionian_revolt_decision
		}
		# But set a cooldown
		set_global_variable = {
			name = ionian_revolt_cooldown
			value = yes
			years = ionian_revolt_cooldown_value
		}

		# Keep track of war wins / losses
		scope:attacker = { register_offensive_war_whitepeace_effect = yes }
		scope:defender = { register_defensive_war_whitepeace_effect = yes }
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ionian_revolt_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = ionian_revolt_cb_defeat_desc_attacker
			}
			desc = ionian_revolt_cb_defeat_desc
		}	
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			remove_character_flag = ai_should_not_transfer
		}
		scope:defender = {
			add_dread = medium_dread_gain
			# Prestige for Defender
			add_prestige = medium_prestige_value
		}
		
		scope:attacker = {
			hard_imprison_character_effect = {
				TARGET = this
				IMPRISONER = scope:defender
			}
			scope:defender = {
				add_opinion = {
					target = prev
					modifier = vassal_lost_faction_revolt_war
				}
			}
		}

		# Enable additional decisions to form/liberate kingdoms on the Asian coast
		custom_tooltip = ionian_revolt_cb_effect.tt.decisions
		set_global_variable = {
			name = ionian_revolt_attempted
			value = yes
		}

		# Allow for future Ionian revolts
		remove_list_global_variable = {
			name = unavailable_unique_decisions
			target = flag:ionian_revolt_decision
		}
		# But set a cooldown
		set_global_variable = {
			name = ionian_revolt_cooldown
			value = yes
			years = ionian_revolt_cooldown_value
		}

		# Keep track of war wins / losses
		scope:attacker = { register_offensive_war_loss_effect = yes }
		scope:defender = { register_defensive_war_win_effect = yes }
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_defender_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	transfer_behavior = transfer
	
	war_name = "IONIAN_REVOLT_WAR_NAME"
	war_name_base = "IONIAN_REVOLT_WAR_NAME_BASE"
	cb_name = "IONIAN_REVOLT_CB_NAME"

	interface_priority = 120

	max_ai_diplo_distance_to_title = 500
}