##########
# Special 'claim' CB used for Ionian Revolt decision.
# If victorious, the revolt leader gains independence and is given control over all land controlled by their former liege in the Ionia region.
##########

ionian_revolt_cb = {
	group = event

	allowed_for_character = {}

	allowed_against_character = {
		scope:attacker = {
			liege = scope:defender
		}
	}

	target_titles = none
	target_title_tier = all
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_liege = yes

	valid_to_start = {
		always = no
	}
	
	cost = {}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ionian_revolt_cb_victory_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = ionian_revolt_cb_victory_desc_attacker
			}
			desc = ionian_revolt_cb_victory_desc
		}	
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		#Make the revolt leader independent
		if = {
			limit = {
				scope:attacker = { is_independent_ruler = no }
			}
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = change
				add_claim_on_loss = no
			}
			change_liege_or_become_independent = {
				CHANGE = scope:change
				VASSAL = scope:attacker
			}
			resolve_title_and_vassal_change = scope:change
		}

		#Attacker gets Ionian kingdom title
		scope:attacker = {
			# Create kingdom title
			create_title_and_vassal_change = {
				type = created
				save_scope_as = change
				add_claim_on_loss = no
			}
			title:k_ionia = {
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
		hidden_effect = {
			title:d_ionia = { set_de_jure_liege_title = title:k_ionia }
			title:d_aiolis = { set_de_jure_liege_title = title:k_ionia }
			title:d_doris = { set_de_jure_liege_title = title:k_ionia }
			title:c_adramyttion = { set_de_jure_liege_title = title:d_aiolis }
			title:c_atarneus = { set_de_jure_liege_title = title:d_aiolis }
		}

		#Maintenance event to handle title changes
		scope:defender = {
			trigger_event = anatolia_decisions.0006
			every_vassal_or_below = {
				limit = {
					any_realm_province = { geographical_region = custom_ionia }
				}
				trigger_event = anatolia_decisions.0006
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		# Enable decisions to form/liberate kingdoms on the Asian coast
		set_global_variable = {
			name = ionian_revolt_attempted
			value = yes
		}

		# Allow for future Ionian revolts
		remove_list_global_variable = {
			name = unavailable_unique_decisions
			target = flag:ionian_revolt_decision
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ionian_revolt_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = ionian_revolt_cb_white_peace_desc_attacker
			}
			desc = ionian_revolt_cb_white_peace_desc
		}		
	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}
		hidden_effect = {
			scope:attacker = {
				add_truce_both_ways = {
					character = scope:defender
					days = 1825
					war = root.war
					result = white_peace
				}
			}
		}

		scope:defender = {
			add_prestige = minor_prestige_value
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Enable decisions to form/liberate kingdoms on the Asian coast
		set_global_variable = {
			name = ionian_revolt_attempted
			value = yes
		}

		# Allow for future Ionian revolts
		remove_list_global_variable = {
			name = unavailable_unique_decisions
			target = flag:ionian_revolt_decision
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ionian_revolt_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = ionian_revolt_cb_defeat_desc_attacker
			}
			desc = ionian_revolt_cb_defeat_desc
		}	
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			add_dread = medium_dread_gain
			# Prestige for Defender
			add_prestige = medium_prestige_value
		}
		
		scope:attacker = {
			hard_imprison_character_effect = {
				TARGET = this
				IMPRISONER = scope:defender
			}
			scope:defender = {
				add_opinion = {
					target = prev
					modifier = vassal_lost_faction_revolt_war
				}
			}
		}

		# Enable decisions to form/liberate kingdoms on the Asian coast
		set_global_variable = {
			name = ionian_revolt_attempted
			value = yes
		}

		# Allow for future Ionian revolts
		remove_list_global_variable = {
			name = unavailable_unique_decisions
			target = flag:ionian_revolt_decision
		}
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_defender_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	transfer_behavior = transfer

	war_name = "INDEPENDENCE_WAR_NAME"

	interface_priority = 120

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50

	max_ai_diplo_distance_to_title = 500
}