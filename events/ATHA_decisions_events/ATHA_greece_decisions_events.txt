namespace = greece_decisions

## form_k_lakedaimon_decision
# 0001 - I formed k_lakedaimon
# 0002 - Someone else formed k_lakedaimon

## form_k_athenai_decision
# 0003 - I formed k_athenai
# 0004 - Someone else formed k_athenai

## form_e_athenai_decision
# 0005 - I formed e_athenai
# 0006 - Someone else formed e_athenai

## form phoroi decisions
# 0007 - I formed a phoros
# 0008 - Someone else formed a phoros

## form k_peloponnesos decision
# 0009 - I formed k_peloponnesos
# 0010 - Someone else formed k_peloponnesos

##############################
# Form k_lakedaimon		 	 #
##############################
## TODO
## If Sparta takes the option to enslave Messenia, there could be a decision for foreign rulers to liberate Messenia and humiliate the Spartans, which would shatter the k_lakedaimon title, hurt the prestige of the Spartan ruler, and could offer some ineteresting choices to the ruler as to how free Messenia should be (in name only, autonomous subject, independent ally etc.) 
## Perhaps there can be an additional decision for rulers to free the helots in their held counties, which would remove the modifier at some cost (gold/prestige/control) that would represent compensation or other measures - there could be an event offering multiple ways of removing the modifier.
## In the longer term, it might be interesting to have a fully fleshed out slavery/serfdom mechanic that would allow us to model peoples who had been reduced to servitude (helots, penestae, Mariandynoi), as well as slave revolts and the slave economy

scripted_trigger cares_about_messenia_trigger = {
	is_independent_ruler = yes
	faith = faith:pythian_faith
	NOR = { # fellow Spartans don't care
		dynasty = dynasty:spartandyn001
		dynasty = dynasty:spartandyn002
	}
}

# I formed k_lakedaimon
greece_decisions.0001 = {
	type = character_event
	title = greece_decisions.0001.t
	desc = greece_decisions.0001.desc
	theme = realm
	left_portrait = {
		character = scope:k_lakedaimon_founder
		animation = personality_honorable
	}

	immediate = {
		play_music_cue = "mx_cue_epic_sacral_moment"
		form_k_lakedaimon_decision_effects = yes

		title:d_messenia = {
			save_scope_as = messenia
		}
	}
	
	option = { # Enslave the Messenians!
		name = greece_decisions.0001.a
		custom_tooltip = greece_decisions.0001.a.tt

		add_character_flag = founder_enslaved_messenia

		title:c_sparta = {
			add_county_modifier = {
				modifier = helot_labourers_modifier
				years = 20
			}
		}
		add_dread = medium_dread_gain

		if = {
			limit = {
				faith = faith:pythian_faith
			}
			add_piety = medium_piety_loss
			every_independent_ruler = {
				limit = {
					faith = faith:pythian_faith
					NOR = { # fellow Spartans don't care
						dynasty = dynasty:spartandyn001
						dynasty = dynasty:spartandyn002
					}
				}
				custom = every_independent_ruler_pythian_faith
				add_opinion = {
					modifier = enslaved_messenia_opinion
					target = root
				}
			}
		}
		every_realm_county = {
			limit = {
				de_jure_liege = title:d_messenia
			}
			custom = every_county_d_messenia
			add_county_modifier = {
				modifier = helot_population_modifier
				years = 20 # TODO: turn this into a permanent modifier which the province holder can pay to remove via decision
			}
		}

		every_player = {
			limit = {
				NOT = { this = scope:k_lakedaimon_founder }
				is_within_diplo_range = { CHARACTER = scope:k_lakedaimon_founder }
			}
			trigger_event = greece_decisions.0002
		}

		stress_impact = {
			generous = medium_stress_impact_gain
			forgiving = medium_stress_impact_gain
			just = medium_stress_impact_gain
			compassionate = medium_stress_impact_gain
		}

		ai_chance = {
			base = 100	

			ai_value_modifier = {
				ai_greed = 0.5
				ai_vengefulness = 1
				ai_boldness = 0.25
				ai_honor = -0.25
				ai_compassion = -0.5
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = generous
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = forgiving
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = just
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = compassionate
			}
		}
	}
	option = { # Grant the Messenians perioikic status
		name = greece_decisions.0001.b
		custom_tooltip = greece_decisions.0001.b.tt

		add_character_flag = founder_freed_messenia

		add_piety = medium_piety_gain

		every_realm_county = {
			limit = {
				de_jure_liege = title:d_messenia
			}
			add_county_modifier = {
				modifier = newly_perioikic_modifier
				years = 20
			}
		}

		every_player = {
			limit = {
				NOT = { this = scope:k_lakedaimon_founder }
				is_within_diplo_range = { CHARACTER = scope:k_lakedaimon_founder }
			}
			trigger_event = greece_decisions.0002
		}

		stress_impact = {
			greedy = minor_stress_impact_gain
			vengeful = medium_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			sadistic = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100	

			ai_value_modifier = {
				ai_vengefulness = -2
				ai_rationality = 0.25
				ai_compassion = 1
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = greedy
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = vengeful
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = arbitrary
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = sadistic
			}
		}
	}
}

# Someone else formed k_lakedaimon
greece_decisions.0002 = {
	type = character_event
	title = greece_decisions.0002.t
	desc = {
		desc = greece_decisions.0002.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:k_lakedaimon_founder = {
						has_character_flag = founder_enslaved_messenia
					}
				}
				desc = greece_decisions.0002.desc_a
			}
			desc = greece_decisions.0002.desc_b
		}
	}
	theme = realm
	left_portrait = {
		character = scope:k_lakedaimon_founder
		animation = personality_honorable
	}

	immediate = {
		title:d_messenia = {
			save_scope_as = messenia
		}
	}

	option = { # Character responding to enslavement
		name = greece_decisions.0002.a

		trigger = {
			scope:k_lakedaimon_founder = {
				has_character_flag = founder_enslaved_messenia
			}
			cares_about_messenia_trigger = no
		}
	}	
	option = { # Pythodorian character responding to enslavement
		name = greece_decisions.0002.a_pythian

		trigger = {
			scope:k_lakedaimon_founder = {
				has_character_flag = founder_enslaved_messenia
			}
			cares_about_messenia_trigger = yes
		}
		show_as_tooltip = { # Actually happens in greece_decisions.0001.a
			add_opinion = {
				modifier = enslaved_messenia_opinion
				target = scope:k_lakedaimon_founder
			}
		}
	}
	option = { # Character responding to 'liberation'
		name = greece_decisions.0002.b

		trigger = {
			scope:k_lakedaimon_founder = {
				has_character_flag = founder_freed_messenia
			}
		}
	}	
}

##############################
# Form k_athenai		 	 #
##############################

# I formed k_athenai
greece_decisions.0003 = {
	type = character_event
	title = greece_decisions.0003.t
	desc = greece_decisions.0003.desc
	theme = realm
	left_portrait = {
		character = scope:k_athenai_founder
		animation = personality_honorable
	}

	immediate = {
		play_music_cue = "mx_cue_epic_sacral_moment"

		form_k_athenai_decision_effects = yes
		if = {
			limit = { k_athenai_prestige_value > 0 }
			hidden_effect = { add_prestige = k_athenai_prestige_value }
			custom_tooltip = greece_decisions.0003.tt
		}
	}
	
	option = { # Be extortionate like the Delian League
		name = greece_decisions.0003.a

		change_government_form = { GOVERNMENT = hegemonic_league_government }
		add_dread = minor_dread_gain

		custom_description_no_bullet = {
			text = greece_decisions_0003_a_effect
			every_vassal = {
				limit = { primary_title = { tier >= tier_county } }
				if = {
					limit = { 
						OR = {
							government_has_flag = is_city_state_government
							government_has_flag = is_coalition_government
						}
					}
					add_character_flag = extorted_vassal
					add_opinion = {
						target = ROOT
						modifier = angry_opinion
						opinion = -20
					}
					vassal_contract_increase_obligation_level = feudal_government_taxes
					vassal_contract_decrease_obligation_level = feudal_government_levies
				}
				if = {
					limit = { vassal_contract_has_flag = has_autonomous_city_state_contract }
					add_character_flag = newly_dependent_city_state
					vassal_contract_set_obligation_level = { type = vassal_role level = 1 }
				}
				else_if = { 
					limit = { vassal_contract_has_flag = has_autonomous_coalition_contract }
					add_character_flag = newly_dependent_coalition
					vassal_contract_set_obligation_level = { type = vassal_role level = 3 }
				}
			}
		}

		add_character_flag = founded_extortionate_hegemonic_league

		every_player = {
			limit = {
				NOT = { this = scope:k_athenai_founder }
				is_within_diplo_range = { CHARACTER = scope:k_athenai_founder }
			}
			trigger_event = greece_decisions.0004
		}

		stress_impact = {
			generous = medium_stress_impact_gain
			forgiving = minor_stress_impact_gain
			just = medium_stress_impact_gain
			compassionate = medium_stress_impact_gain
		}

		ai_chance = {
			base = 100	

			ai_value_modifier = {
				ai_greed = 2
				ai_vengefulness = 1
				ai_honor = -0.5
				ai_compassion = -0.5
				ai_rationality = -1
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = generous
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = forgiving
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = just
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = compassionate
			}
		}
	}
	option = { # Be moderate like the Second Athenian League
		name = greece_decisions.0003.b

		change_government_form = { GOVERNMENT = hegemonic_league_government }

		custom_description_no_bullet = {
			text = greece_decisions_0003_b_effect
			every_vassal = {
				limit = { primary_title = { tier >= tier_county } }
				if = {
					limit = { vassal_contract_has_flag = has_dependent_city_state_contract }
					add_character_flag = newly_autonomous_city_state
					vassal_contract_set_obligation_level = { type = vassal_role level = 0 }
					hidden_effect = { set_autonomous_contracts_effect = yes }
				}
				else_if = { 
					limit = { vassal_contract_has_flag = has_dependent_coalition_contract }
					add_character_flag = newly_autonomous_coalition
					vassal_contract_set_obligation_level = { type = vassal_role level = 2 }
					hidden_effect = { set_autonomous_contracts_effect = yes }
				}
			}
		}

		add_character_flag = founded_hegemonic_league

		every_player = {
			limit = {
				NOT = { this = scope:k_athenai_founder }
				is_within_diplo_range = { CHARACTER = scope:k_athenai_founder }
			}
			trigger_event = greece_decisions.0004
		}

		stress_impact = {
			greedy = minor_stress_impact_gain
			vengeful = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100	

			ai_value_modifier = {
				ai_greed = -1
				ai_vengefulness = -0.5
				ai_boldness = 0.5
				ai_rationality = 0.5
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = greedy
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = vengeful
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = arbitrary
			}
		}
	}
	option = { # Be mild and reform into a Federal League
		name = greece_decisions.0003.c

		custom_tooltip = greece_decisions.0003.c.tt

		change_government_form = { GOVERNMENT = federal_league_government }
		add_piety = minor_piety_gain

		custom_description_no_bullet = {
			text = greece_decisions_0003_c_effect
			every_vassal = {
				limit = { primary_title = { tier >= tier_county } }
				if = {
					limit = { 
						OR = {
							government_has_flag = is_city_state_government
							government_has_flag = is_coalition_government
						}
					}
					add_character_flag = grateful_vassal
					add_opinion = {
						target = ROOT
						modifier = grateful_opinion
						opinion = 10
					}
				}
				else_if = {
					limit = { 
						has_culture = culture:athenian
						government_has_flag = is_bureaucracy_government
					}
					add_character_flag = federal_athenian_vassal
					add_opinion = {
						target = ROOT
						modifier = weak_opinion
						opinion = -10
					}
				}
				if = {
					limit = { vassal_contract_has_flag = has_dependent_city_state_contract }
					add_character_flag = newly_autonomous_city_state
					vassal_contract_set_obligation_level = { type = vassal_role level = 0 }
					hidden_effect = { set_autonomous_contracts_effect = yes }
				}
				else_if = { 
					limit = { vassal_contract_has_flag = has_dependent_coalition_contract }
					add_character_flag = newly_autonomous_coalition
					vassal_contract_set_obligation_level = { type = vassal_role level = 2 }
					hidden_effect = { set_autonomous_contracts_effect = yes }
				}
			}
		}

		add_character_flag = founded_federal_league

		every_player = {
			limit = {
				NOT = { this = scope:k_athenai_founder }
				is_within_diplo_range = { CHARACTER = scope:k_athenai_founder }
			}
			trigger_event = greece_decisions.0004
		}

		stress_impact = {
			greedy = medium_stress_impact_gain
			vengeful = medium_stress_impact_gain
			arbitrary = medium_stress_impact_gain
			ambitious = minor_stress_impact_gain
		}

		ai_chance = {
			base = 0 # shouldn't be willing to give up their hegemony that easily	

			ai_value_modifier = {
				ai_boldness = -0.5
				ai_greed = -2
				ai_vengefulness = -1
				ai_rationality = 0.5
				ai_compassion = 1
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = greedy
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = vengeful
			}
			modifier = { # Weight down for stress.
				add = -20
				has_trait = arbitrary
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = ambitious
			}
		}
	}
}

# Someone else formed k_athenai
greece_decisions.0004 = {
	type = character_event
	title = greece_decisions.0004.t
	desc = {
		desc = greece_decisions.0004.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:k_athenai_founder = { has_character_flag = founded_extortionate_hegemonic_league }
				}
				desc = greece_decisions.0004.desc_a
			}
			triggered_desc = {
				trigger = {
					scope:k_athenai_founder = { has_character_flag = founded_hegemonic_league }
				}
				desc = greece_decisions.0004.desc_b
			}
			desc = greece_decisions.0004.desc_c
		}
	}
	theme = realm
	left_portrait = {
		character = scope:k_athenai_founder
		triggered_animation = {
			trigger = { 
				scope:k_athenai_founder = { has_character_flag = founded_extortionate_hegemonic_league } 
			}
			animation = personality_greedy
		}
		triggered_animation = {
			trigger = { 
				scope:k_athenai_founder = { has_character_flag = founded_hegemonic_league } 
			}
			animation = personality_honorable
		}
		animation = personality_content
	}

	immediate = {
	}

	option = { # Athenian
		name = greece_decisions.0004.a 

		trigger = { 
			has_culture = culture:athenian
			NOR = { 
				has_character_flag = federal_athenian_vassal 
				has_character_flag = extorted_vassal 
			}
		}

		show_as_tooltip = {
			if = {
				limit = { has_character_flag = grateful_vassal }
				add_opinion = {
					target = scope:k_athenai_founder
					modifier = grateful_opinion
					opinion = 10
				}
				remove_character_flag = grateful_vassal
			}
			if = {
				limit = { has_character_flag = newly_autonomous_city_state }
				vassal_contract_set_obligation_level = { type = vassal_role level = 0 }
				remove_character_flag = newly_autonomous_city_state
			}
			else_if = { 
				limit = { has_character_flag = newly_autonomous_coalition }
				vassal_contract_set_obligation_level = { type = vassal_role level = 2 }
				remove_character_flag = newly_autonomous_coalition
			}
		}
	}
	option = { # Athenian disappointed by federalism
		name = greece_decisions.0004.a_federal

		trigger = { 
			has_character_flag = federal_athenian_vassal 
			NOT = { has_character_flag = grateful_vassal }
		}

		show_as_tooltip = {
			add_opinion = {
				target = scope:k_athenai_founder
				modifier = weak_opinion
				opinion = -10
			}
			remove_character_flag = federal_athenian_vassal
		}
	}
	option = { # Independent Macedonians
		name = greece_decisions.0004.b

		trigger = { 
			has_culture = culture:macedonian
			is_independent_yes = yes
		}
	}
	option = { # Extorted vassals
		name = greece_decisions.0004.c

		trigger = { has_character_flag = extorted_vassal }

		show_as_tooltip = {
			add_opinion = {
				target = scope:k_athenai_founder
				modifier = angry_opinion
				opinion = -20
			}
			vassal_contract_increase_obligation_level = feudal_government_taxes
			vassal_contract_decrease_obligation_level = feudal_government_levies

			if = {
				limit = { has_character_flag = newly_dependent_city_state }
				vassal_contract_set_obligation_level = { type = vassal_role level = 1 }
				remove_character_flag = newly_dependent_city_state
			}
			else_if = { 
				limit = { has_character_flag = newly_dependent_coalition }
				vassal_contract_set_obligation_level = { type = vassal_role level = 3 }
				remove_character_flag = newly_dependent_coalition
			}
			
			remove_character_flag = extorted_vassal
		}
	}
	option = { # Everyone else
		name = greece_decisions.0004.d

		trigger = { 
			NOR = {
				has_character_flag = extorted_vassal
				has_culture = culture:athenian
				AND = {
					has_culture = culture:macedonian
					is_independent_yes = yes
				}
			}
		}

		show_as_tooltip = {
			if = {
				limit = { has_character_flag = grateful_vassal }
				add_opinion = {
					target = scope:k_athenai_founder
					modifier = grateful_opinion
					opinion = 10
				}
				remove_character_flag = grateful_vassal
			}
			if = {
				limit = { has_character_flag = newly_autonomous_city_state }
				vassal_contract_set_obligation_level = { type = vassal_role level = 0 }
				remove_character_flag = newly_autonomous_city_state
			}
			else_if = { 
				limit = { has_character_flag = newly_autonomous_coalition }
				vassal_contract_set_obligation_level = { type = vassal_role level = 2 }
				remove_character_flag = newly_autonomous_coalition
			}
		}
	}
}

##############################
# Form e_athenai		 	 #
##############################

# I formed e_athenai
greece_decisions.0005 = {
	type = character_event
	title = greece_decisions.0005.t
	desc = greece_decisions.0005.desc
	theme = realm
	left_portrait = {
		character = scope:e_athenai_founder
		animation = personality_honorable
	}

	immediate = {
		play_music_cue = "mx_cue_epic_sacral_moment"

		form_e_athenai_decision_effects = yes
	}

	option = { # Okay
		name = greece_decisions.0005.a

		every_player = {
			limit = {
				NOT = { this = scope:e_athenai_founder }
				is_within_diplo_range = { CHARACTER = scope:e_athenai_founder }
			}
			trigger_event = greece_decisions.0006
		}
	}	
}

# Someone else formed e_athenai
greece_decisions.0006 = {
	type = character_event
	title = greece_decisions.0006.t
	desc = greece_decisions.0006.desc
	theme = realm
	left_portrait = {
		character = scope:e_athenai_founder
		animation = personality_honorable
	}

	immediate = {
	}

	option = { # Okay
		name = greece_decisions.0006.a
		
		trigger = { 
			NAND = {
				OR = {
					has_culture = culture:macedonian
					has_culture = culture:boeotian
					is_spartan = yes
				}
				is_independent_ruler = yes
			}
		}
	}	
	option = { # We've brought down Athens before
		name = greece_decisions.0006.b

		trigger = { 
			OR = {
				has_culture = culture:macedonian
				has_culture = culture:boeotian
				is_spartan = yes
			}
			is_independent_ruler = yes
		}
	}	
}

##############################
# Athenian Phoroi Decisions	 #
##############################

# I formed a phoros
greece_decisions.0007 = {
	type = character_event
	title = greece_decisions.0007.t
	desc = greece_decisions.0007.desc
	theme = realm
	left_portrait = {
		character = scope:phoros_founder
		animation = personality_greedy
	}

	immediate = {
		play_music_cue = "mx_cue_epic_sacral_moment"

		if = {
			limit = { title:k_insular_phoros = { this = scope:phoros } }
			form_k_insular_phoros_decision_effects = yes

			title:c_delos = { save_scope_as = centre_1 }
			title:c_chalkis = { save_scope_as = centre_2 }
			title:c_demetrias = { save_scope_as = centre_3 }
			title:c_eretria = { save_scope_as = centre_4 }
		}
		else_if = {
			limit = { title:k_ionian_phoros = { this = scope:phoros } }
			form_k_ionian_phoros_decision_effects = yes
			
			title:c_miletos = { save_scope_as = centre_1 }
			title:c_rhodos = { save_scope_as = centre_2 }
			title:c_mytilene = { save_scope_as = centre_3 }
			title:c_samos = { save_scope_as = centre_4 }
		}
		else_if = {
			limit = { title:k_thracian_phoros = { this = scope:phoros } }
			form_k_thracian_phoros_decision_effects = yes
			
			title:c_amphipolis = { save_scope_as = centre_1 }
			title:c_thessalonike = { save_scope_as = centre_2 }
			title:c_lemnos = { save_scope_as = centre_3 }
			title:c_philippoi = { save_scope_as = centre_4 }
		}
		else_if = {
			limit = { title:k_hellespontine_phoros = { this = scope:phoros } }
			form_k_hellespontine_phoros_decision_effects = yes
			
			title:c_byzantion = { save_scope_as = centre_1 }
			title:c_chersonesos_thrace = { save_scope_as = centre_2 }
			title:c_kyzikos = { save_scope_as = centre_3 }
			title:c_kios = { save_scope_as = centre_4 }
		}

		remove_character_flag = founded_k_insular_phoros

		every_held_title = {
			count = 4
			if = {
				limit = {
					tier = tier_county
					target_is_de_jure_liege_or_above = scope:phoros
				}
				if = {
					limit = {
						OR = {
							NOT = { exists = scope:province_1 }
							this = holder.capital_county
						}
					}
					save_scope_as = province_1
				}
				else_if = {
					limit = {
						OR = {
							NOT = { exists = scope:province_2 }
							this = scope:centre_1
						}
					}
					save_scope_as = province_2
				}
				else_if = {
					limit = {
						OR = {
							NOT = { exists = scope:province_3 }
							this = scope:centre_2
						}
					}
					save_scope_as = province_3
				}
				else_if = {
					limit = {
						OR = {
							NOT = { exists = scope:province_3 }
							this = scope:centre_3
						}
					}
					save_scope_as = province_4
				}
			}
		}
	}

	option = { # province_1
		name = greece_decisions.0007.a

		trigger = { exists = scope:province_1 }

		scope:province_1 = {
			add_county_modifier = {
				modifier = administrative_centre_modifier
				years = 50
			}
			save_scope_as = new_administrative_centre

			#If this county isn't the de jure capital of k_insular_phoros, make it so.
			if = {
				limit = {
					NOT = { this = scope:phoros.title_capital_county }
				}
				scope:phoros = { set_capital_county = scope:province_1 }
			}
			#If king tier, and this county isn't the realm capital, make it so.
			if = {
				limit = {
					NOT = { this = holder.capital_county }
					holder = { highest_held_title_tier = tier_kingdom }
				}
				holder = { set_realm_capital = scope:province_1 }
			}
		}
	}
	option = { # province_2
		name = greece_decisions.0007.b

		trigger = { exists = scope:province_2 }

		scope:province_2 = {
			add_county_modifier = {
				modifier = administrative_centre_modifier
				years = 50
			}
			save_scope_as = new_administrative_centre
			
			#If this county isn't the de jure capital of k_insular_phoros, make it so.
			if = {
				limit = {
					NOT = { this = scope:phoros.title_capital_county }
				}
				scope:phoros = { set_capital_county = scope:province_2 }
			}
			#If king tier, and this county isn't the realm capital, make it so.
			if = {
				limit = {
					NOT = { this = holder.capital_county }
					holder = { highest_held_title_tier = tier_kingdom }
				}
				holder = { set_realm_capital = scope:province_2 }
			}
		}
	}
	option = { # province_3
		name = greece_decisions.0007.c

		trigger = { exists = scope:province_3 }

		scope:province_3 = {
			add_county_modifier = {
				modifier = administrative_centre_modifier
				years = 50
			}
			save_scope_as = new_administrative_centre
			
			#If this county isn't the de jure capital of k_insular_phoros, make it so.
			if = {
				limit = {
					NOT = { this = scope:phoros.title_capital_county }
				}
				scope:phoros = { set_capital_county = scope:province_3 }
			}
			#If king tier, and this county isn't the realm capital, make it so.
			if = {
				limit = {
					NOT = { this = holder.capital_county }
					holder = { highest_held_title_tier = tier_kingdom }
				}
				holder = { set_realm_capital = scope:province_3 }
			}
		}
	}
	option = { # province_4
		name = greece_decisions.0007.d

		trigger = { exists = scope:province_4 }

		scope:province_4 = {
			add_county_modifier = {
				modifier = administrative_centre_modifier
				years = 50
			}
			save_scope_as = new_administrative_centre
			
			#If this county isn't the de jure capital of k_insular_phoros, make it so.
			if = {
				limit = {
					NOT = { this = scope:phoros.title_capital_county }
				}
				scope:phoros = { set_capital_county = scope:province_4 }
			}
			#If king tier, and this county isn't the realm capital, make it so.
			if = {
				limit = {
					NOT = { this = holder.capital_county }
					holder = { highest_held_title_tier = tier_kingdom }
				}
				holder = { set_realm_capital = scope:province_4 }
			}
		}
	}
	option = { # Centre 1
		name = greece_decisions.0007.e

		trigger = { 
			#Only the ruler of e_athenai can designate a county they don't own
			has_primary_title = title:e_athenai
			
			NOR = { 
				exists = scope:province_4 
				has_title = scope:centre_1
			}
		}

		scope:centre_1 = {
			add_county_modifier = {
				modifier = administrative_centre_modifier
				years = 50
			}
			save_scope_as = new_administrative_centre
			
			#If this county isn't the de jure capital of k_insular_phoros, make it so.
			if = {
				limit = {
					NOT = { this = scope:phoros.title_capital_county }
				}
				scope:phoros = { set_capital_county = scope:centre_1 }
			}
		}
	}
	option = { # Centre 2
		name = greece_decisions.0007.f

		trigger = { 
			#Only the ruler of e_athenai can designate a county they don't own
			has_primary_title = title:e_athenai
			
			OR = {
				NOR = { 
					exists = scope:province_4
					NOT = { has_title = scope:centre_1 }
					has_title = scope:centre_2
				}
				NOR = { 
					exists = scope:province_3 
					has_title = scope:centre_2
				}
			}
		}

		scope:centre_2 = {
			add_county_modifier = {
				modifier = administrative_centre_modifier
				years = 50
			}
			save_scope_as = new_administrative_centre
			
			#If this county isn't the de jure capital of k_insular_phoros, make it so.
			if = {
				limit = {
					NOT = { this = scope:phoros.title_capital_county }
				}
				scope:phoros = { set_capital_county = scope:centre_2 }
			}
		}
	}
	option = { # Centre 3
		name = greece_decisions.0007.g

		trigger = { 
			#Only the ruler of e_athenai can designate a county they don't own
			has_primary_title = title:e_athenai
			
			OR = {
				NOR = { 
					exists = scope:province_4
					NOT = { has_title = scope:centre_1 }
					NOT = { has_title = scope:centre_2 }
					has_title = scope:centre_3
				}
				NOR = { 
					exists = scope:province_3
					NOT = { has_title = scope:centre_2 }
					has_title = scope:centre_3
				}
				NOR = { 
					exists = scope:province_2
					has_title = scope:centre_3
				}
			}
		}

		scope:centre_3 = {
			add_county_modifier = {
				modifier = administrative_centre_modifier
				years = 50
			}
			save_scope_as = new_administrative_centre
			
			#If this county isn't the de jure capital of k_insular_phoros, make it so.
			if = {
				limit = {
					NOT = { this = scope:phoros.title_capital_county }
				}
				scope:phoros = { set_capital_county = scope:centre_3 }
			}
		}
	}
	option = { # Centre 4
		name = greece_decisions.0007.h

		trigger = { 
			#Only the ruler of e_athenai can designate a county they don't own
			has_primary_title = title:e_athenai
			
			OR = {
				NOR = { 
					exists = scope:province_4
					NOT = { has_title = scope:centre_1 }
					NOT = { has_title = scope:centre_2 }
					NOT = { has_title = scope:centre_3 }
					has_title = scope:centre_4
				}
				NOR = { 
					exists = scope:province_3
					NOT = { has_title = scope:centre_2 }
					NOT = { has_title = scope:centre_3 }
					has_title = scope:centre_4
				}
				NOR = { 
					exists = scope:province_2 
					NOT = { has_title = scope:centre_3 }
					has_title = scope:centre_4
				}
				NOR = { 
					exists = scope:province_1 
					has_title = scope:centre_4
				}
			}
		}

		scope:centre_4 = {
			add_county_modifier = {
				modifier = administrative_centre_modifier
				years = 50
			}
			save_scope_as = new_administrative_centre
			
			#If this county isn't the de jure capital of k_insular_phoros, make it so.
			if = {
				limit = {
					NOT = { this = scope:phoros.title_capital_county }
				}
				scope:phoros = { set_capital_county = scope:centre_4 }
			}
		}
	}

	after = {
		# Send narrative fluff to other players (if any).
		every_player = {
			limit = {
				NOT = { this = root }
				top_liege = scope:phoros_founder.top_liege
			}
			trigger_event = greece_decisions.0008
		}
	}
}

# Someone else formed a phoros
greece_decisions.0008 = {
	type = character_event
	title = greece_decisions.0008.t
	desc = {
		desc = greece_decisions.0008.desc
		triggered_desc = {
			trigger = {
				has_title = title:e_athenai
			}
			desc = greece_decisions.0008.desc_a
		}
	}
	theme = realm
	left_portrait = {
		character = scope:phoros_founder
		animation = personality_greedy
	}

	immediate = {
		#The Athenian ruler hears the future!
		if = {
			limit = { has_title = title:e_athenai }
			play_music_cue = "mx_cue_combat_2"
		}
	}
	option = { # Okay
		name = greece_decisions.0008.a
	}	
}

##############################
# Form k_peloponnesos	 	 #
##############################

# I formed k_peloponnesos
greece_decisions.0009 = {
	type = character_event
	title = greece_decisions.0009.t
	desc = greece_decisions.0009.desc
	theme = realm
	left_portrait = {
		character = scope:k_peloponnesos_founder
		animation = personality_rational
	}

	immediate = {
		form_k_peloponnesos_decision_effects = yes
		every_county_in_region = {
			region = custom_peloponnese
			limit = {
				exists = holder
				holder = { 
					form_k_peloponnesos_decision_potential_vassal_trigger = yes
					NOT = { this = scope:k_peloponnesos_founder } 
				}
			}
			holder = { add_character_flag = peloponnesian_ruler }
		}
	}

	option = { # Hegemonic
		name = greece_decisions.0009.a

		add_character_flag = k_peloponnesos_founder_hegemonic

		change_government_form = { GOVERNMENT = hegemonic_league_government }

		every_ruler = {
			limit = { has_character_flag = peloponnesian_ruler }
			trigger_event = {
				id = greece_decisions.0010
				days = { 7 28 }
			}
		}

		stress_impact = {
			generous = minor_stress_impact_gain
			content = minor_stress_impact_gain
			just = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100	

			ai_value_modifier = {
				ai_greed = 0.5
				ai_boldness = 1
				ai_compassion = -0.5
			}
			modifier = { # Federal realms don't want this.
				add = -100
				government_has_flag = is_federal_government
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = generous
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = content
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = just
			}
		}
	}	

	option = { # Federal
		name = greece_decisions.0009.b

		add_character_flag = k_peloponnesos_founder_federal

		change_government_form = { GOVERNMENT = federal_league_government }

		every_ruler = {
			limit = { has_character_flag = peloponnesian_ruler }
			trigger_event = {
				id = greece_decisions.0010
				days = { 7 28 }
			}
		}

		stress_impact = {
			greedy = minor_stress_impact_gain
			arbitrary = minor_stress_impact_gain
			ambitious = minor_stress_impact_gain
		}

		ai_chance = {
			base = 100

			ai_value_modifier = {
				ai_boldness = -0.5
				ai_greed = -1
				ai_rationality = 0.5
				ai_compassion = 1
			}
			modifier = { # Hegemonies shouldn't want to give up their position so easily.
				add = -100
				OR = {
					government_has_flag = is_hegemonic_government
					government_has_flag = is_city_state_government
				}
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = greedy
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = arbitrary
			}
			modifier = { # Weight down for stress.
				add = -10
				has_trait = ambitious
			}
		}
	}
}

scripted_trigger is_hegemon_candidate_trigger = {
	#There can only be one claimant
	NOT = {
		any_ruler = { has_character_flag = peloponnesian_ruler_claimant }
	}

	# Can only be hegemon of a hegemonic realm
	scope:k_peloponnesos_founder = { government_has_flag = is_hegemonic_government }

	#Has to have at least 80% of the Peloponnesian ruler's military strength
	ROOT.max_military_strength > {
		value = scope:k_peloponnesos_founder.max_military_strength
		multiply = 0.8
	}

	#Has to be the sort of person to press such a claim
	has_trait = ambitious
	NOR = { 
		has_trait = craven
		has_trait = lazy 
	}
}

# Independent Peloponnesian ruler decides whether to join league 
greece_decisions.0010 = {
	type = character_event
	title = greece_decisions.0010.t
	desc = greece_decisions.0010.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_rational
	}
	right_portrait = {
		character = scope:k_peloponnesos_founder
		animation = personality_honorable
	}

	immediate = {
		set_variable = {
			name = k_peloponnesos_acceptance
			value = k_peloponnesos_acceptance_value_modifier
			days = 10
		}
	}

	option = { # Sure
		name = greece_decisions.0010.a

		#Vassalisation, opinion modifiers, de jure changes etc.
		form_k_peloponnesos_accept_effect = yes

		scope:k_peloponnesos_founder = {
			trigger_event = greece_decisions.0011
		}

		ai_chance = {
			base = 100

			#If a ruler has high enough acceptance, we shouldn't leave it to chance
			modifier = {
				var:k_peloponnesos_acceptance > 400
				factor = 10
			}
			#If a ruler has low enough acceptance, we shouldn't leave it to chance
			modifier = {
				var:k_peloponnesos_acceptance < 200
				factor = 0
			}
			#Rulers should never pick this over the free claim
			modifier = {
				is_hegemon_candidate_trigger = yes
				factor = 0
			}
		}
	}

	option = { # Nah
		name = greece_decisions.0010.b

		#Opinion modifiers etc.
		form_k_peloponnesos_reject_effect = yes

		scope:k_peloponnesos_founder = {
			trigger_event = greece_decisions.0011
		}

		ai_chance = {
			base = 300

			#If a ruler has high enough acceptance, we shouldn't leave it to chance
			modifier = {
				var:k_peloponnesos_acceptance > 400
				factor = 0
			}
			#If a ruler has low enough acceptance, we shouldn't leave it to chance
			modifier = {
				var:k_peloponnesos_acceptance < 200
				factor = 10
			}
			#Rulers should never pick this over the free claim
			modifier = {
				is_hegemon_candidate_trigger = yes
				factor = 0
			}
		}
	}

#	option = { # Just to see the AI chance
#		name = greece_decisions.0010.test2
#
#		ai_chance = {
#			base = 0
#			
#			var:k_peloponnesos_acceptance = yes
#			
#		}
#	}
#
#	option = { # Just to see the AI chance
#		name = greece_decisions.0010.test
#
#		ai_chance = {
#			base = 0
#
#			k_peloponnesos_acceptance_modifier = {
#				if = {
#					limit = { this > 100 }
#				}
#				add = 1000
#			}
#		}
#	}

	option = { # I'd be a better hegemon
		name = greece_decisions.0010.c

		# Has to be an ambitious ruler of similar strength
		trigger = { is_hegemon_candidate_trigger = yes }

		add_internal_flag = special

		# Give claim, prestige, opinion modifiers etc.
		add_prestige = medium_prestige_gain
		form_k_peloponnesos_claimant_effect = yes

		scope:k_peloponnesos_founder = {
			trigger_event = greece_decisions.0011
		}

		# AI should always take this if it has the chance
		ai_chance = {
			base = 1000
		}
	}
}

# Peloponnesian League founder gets notified of the overall outcome 
greece_decisions.0011 = {
	type = character_event
	title = greece_decisions.0011.t
	desc = {
		desc = greece_decisions.0011.desc_opening
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = k_peloponnesos_critical_failure }
				desc = greece_decisions.0011.desc_critical_failure
			}
			triggered_desc = {
				trigger = { has_character_flag = k_peloponnesos_failure }
				desc = greece_decisions.0011.desc_failure
			}
			triggered_desc = {
				trigger = { has_character_flag = k_peloponnesos_success }
				desc = greece_decisions.0011.desc_success
			}
			desc = greece_decisions.0011.desc_critical_success
		}
		triggered_desc = {
			trigger = { exists = scope:peloponnesian_claimant }
			desc = {
				first_valid = {
					triggered_desc = {
						trigger = { 
							OR = {
								has_character_flag = k_peloponnesos_critical_failure 
								has_character_flag = k_peloponnesos_failure
							}
						}
						desc = greece_decisions.0011.desc_failure_claimant
					}
					triggered_desc = {
						trigger = { 
							OR = {
								has_character_flag = k_peloponnesos_critical_success
								has_character_flag = k_peloponnesos_success
							}
						}
						desc = greece_decisions.0011.desc_success_claimant
					}
				}
			}
		}
	}

	theme = realm
	left_portrait = {
		character = scope:k_peloponnesos_founder
		triggered_animation = {
			trigger = { exists = scope:peloponnesian_claimant }
			animation = personality_vengeful
		}
		triggered_animation = {
			trigger = {  
				NOT = { exists = scope:peloponnesian_claimant }
				OR = {
					has_character_flag = k_peloponnesos_critical_failure
					has_character_flag = k_peloponnesos_failure
				}
			}
			animation = personality_coward
		}
		triggered_animation = {
			trigger = {  
				NOT = { exists = scope:peloponnesian_claimant }
				OR = {
					has_character_flag = k_peloponnesos_critical_success
					has_character_flag = k_peloponnesos_success
				}
			}
			animation = personality_honorable
		}
	}
	right_portrait = {
		character = scope:peloponnesian_claimant
		animation = personality_dishonorable
	}

	trigger = {
		NOT = {
			any_ruler = { has_character_flag = peloponnesian_ruler }
		}
	}

	immediate = {
		#Add the rulers who responded to the appropriate lists so we can determine k_peloponnesos_founder's score
		every_ruler = {
			if = {
				limit = { has_character_flag = peloponnesian_ruler_accepted }
				add_to_list = peloponnesian_accepted_list
			}
			else_if = {
				limit = { has_character_flag = peloponnesian_ruler_rejected }
				add_to_list = peloponnesian_rejected_list
			}
			else_if = {
				limit = { has_character_flag = peloponnesian_ruler_claimant }
				add_to_list = peloponnesian_rejected_list
				save_scope_as = peloponnesian_claimant
			}
		}

		if = {
			limit = {
				# If no one joins at all, that's bad
				OR = {
					k_peloponnesos_acceptance_value = 0 
					k_peloponnesos_outcome_value < 0
				}
				# Lots of rejects is bad, even if you get a few accepts
				k_peloponnesos_outcome_value < -8
			}
			add_character_flag = k_peloponnesos_critical_failure
		}
		else_if = {
			# Not great if more rulers are rejecting than accepting
			limit = { 
				k_peloponnesos_outcome_value >= -8
				k_peloponnesos_outcome_value < 0
			}
			add_character_flag = k_peloponnesos_failure
		}
		else_if = {
			# Good if there's more accepts than rejects
			limit = { 
				k_peloponnesos_outcome_value >= 0
				k_peloponnesos_outcome_value < 8
			}
			add_character_flag = k_peloponnesos_success
		}
		else_if = {
			# If most rulers are accepting, then that's great
			limit = { 
				k_peloponnesos_outcome_value >= 8
			}
			add_character_flag = k_peloponnesos_critical_success
		}
	}

	option = { # Okay
		name = greece_decisions.0011.a

		# Add/remove prestige
		if = {
			limit = { has_character_flag = k_peloponnesos_critical_failure }
			add_prestige = major_prestige_loss
		}
		else_if = {
			limit = { has_character_flag = k_peloponnesos_failure }
			add_prestige = medium_prestige_loss
		}
		else_if = {
			limit = { has_character_flag = k_peloponnesos_success }
			add_prestige = minor_prestige_gain
		}
		else_if = {
			limit = { has_character_flag = k_peloponnesos_critical_success }
			add_prestige = medium_prestige_gain
		}
		# Tooltips to show effects e.g. opinion modifiers, vassalisation
		custom_tooltip = greece_decisions.0011.tt_accepted
		custom_tooltip = greece_decisions.0011.tt_rejected

		if = { 
			limit = { exists = scope:peloponnesian_claimant }
			show_as_tooltip = {
				scope:peloponnesian_claimant = { form_k_peloponnesos_claimant_effect }
			}
		}
	}
}