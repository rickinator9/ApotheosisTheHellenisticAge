namespace = ATHA_vassal_contract

### TODO List
## We could tie in the populist/elitist traits to how the vassal (and their courtiers and vassals) regard the change, and perhaps use it for AI logic when deciding on what government to impose on a vassal

# Adjust government type when a city state becomes autonomous.
ATHA_vassal_contract.1 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_liege
		exists = scope:vassal_contract_holder

		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_autonomous_city_state_contract
			# Either the vassal does not have a city state government at all or he became autonomous, in which case he should be able to change their government.
			OR = {
				NOT = { government_has_flag = is_city_state_government }
				AND = {
					NOT = { vassal_contract_has_flag = category_imposed_franchise }
					scope:dependent_will_become_autonomous = yes
				}
			}
		}
	}

    immediate = {
		scope:vassal_contract_holder = {
			add_character_flag = vassal_can_create_city_state
			trigger_event = ATHA_government.0006 # Vassal decides what city-state government to adopt

			if = {
				limit = {
					vassal_contract_has_flag = has_imposed_franchise
				}
				vassal_contract_set_obligation_level = {
					type = imposed_franchise
					level = obligation_level_imposed_franchise_none
				}
			}
			vassal_contract_set_obligation_level = {
				type = coinage_rights
				level = obligation_level_coinage_rights_granted
			}
			vassal_contract_set_obligation_level = {
				type = religious_rights
				level = obligation_level_religious_rights_protected
			}
			vassal_contract_set_obligation_level = {
				type = title_revocation_rights
				level = obligation_level_title_revocation_rights_protected
			}
			vassal_contract_set_obligation_level = {
				type = garrison_rights
				level = obligation_level_garrison_rights_none
			}
		}
    }
}

# Adjust a vassal to a dependent city state where the liege can choose which type they become.
ATHA_vassal_contract.2 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_liege
		exists = scope:vassal_contract_holder

		scope:vassal_contract_liege.culture = { has_innovation = innovation_classical_constitution }
		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_dependent_city_state_contract
			# Either the vassal does not have a city state government at all or he became dependent, in which case the liege should be able to change their government.
			OR = {
				NOT = { government_has_flag = is_city_state_government }
				AND = {
					NOT = { vassal_contract_has_flag = category_imposed_franchise }
					scope:autonomous_will_become_dependent = yes
				}
			}
		}
	}

    immediate = {
		scope:vassal_contract_holder = { save_scope_as = dependent_city_state_vassal }
		scope:vassal_contract_liege = {
			trigger_event = ATHA_government.0004 # Liege decides on city-state government for their vassal
		}
    }
}

# Adjust a vassal to a dependent city state where they can choose when the liege does not have the right innovation and they did not previously have a city-state government form.
ATHA_vassal_contract.3 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_liege
		exists = scope:vassal_contract_holder

		NOT = { scope:vassal_contract_liege.culture = { has_innovation = innovation_classical_constitution } }
		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_dependent_city_state_contract
			NOT = { government_has_flag = is_city_state_government }
		}
	}

    immediate = {
		scope:vassal_contract_holder = {
			add_character_flag = vassal_can_create_city_state
			trigger_event = ATHA_government.0003 # Vassal decides what city-state government to adopt
		}
    }
}

# Adjust a vassal to an autonomous coalition government when their contract changes.
ATHA_vassal_contract.4 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_liege
		exists = scope:vassal_contract_holder

		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_autonomous_coalition_contract
			OR = {
				NOT = { government_has_flag = is_coalition_government }
				AND = {
					NAND = { 
						vassal_contract_has_flag = category_enforced_federalism
						vassal_contract_has_flag = category_enforced_centralisation
					}
					scope:dependent_will_become_autonomous = yes
				}
			}
		}
	}

    immediate = {
		scope:vassal_contract_holder = {
			trigger_event = ATHA_government.0007 # Vassal decides what coalition government to adopt

			if = {
				limit = { vassal_contract_has_flag = has_enforced_centralisation }

				vassal_contract_set_obligation_level = {
					type = enforced_centralisation
					level = obligation_level_enforced_centralisation_none
				}
			}
			if = {
				limit = { vassal_contract_has_flag = has_enforced_federalism }

				vassal_contract_set_obligation_level = {
					type = enforced_federalism
					level = obligation_level_enforced_federalism_none
				}
			}
			vassal_contract_set_obligation_level = {
				type = coinage_rights
				level = obligation_level_coinage_rights_granted
			}
			vassal_contract_set_obligation_level = {
				type = religious_rights
				level = obligation_level_religious_rights_protected
			}
			vassal_contract_set_obligation_level = {
				type = title_revocation_rights
				level = obligation_level_title_revocation_rights_protected
			}
			vassal_contract_set_obligation_level = {
				type = garrison_rights
				level = obligation_level_garrison_rights_none
			}
		}
    }
}

# Adjust a vassal to a dependent coalition where the liege can choose which type they become.
ATHA_vassal_contract.5 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_liege
		exists = scope:vassal_contract_holder

		scope:vassal_contract_liege.culture = { has_innovation = innovation_classical_diplomatic_missions }
		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_dependent_coalition_contract
			OR = {
				NOT = { government_has_flag = is_coalition_government }
				AND = {
					NAND = { 
						vassal_contract_has_flag = category_enforced_federalism
						vassal_contract_has_flag = category_enforced_centralisation
					}
					scope:autonomous_will_become_dependent = yes
				}
			}
		}
	}

    immediate = {
		scope:vassal_contract_holder = {
			save_scope_as = dependent_coalition_vassal
		}
		scope:vassal_contract_liege = {
			trigger_event = ATHA_government.0008 # Liege decides on coalition government for their vassal
		}
    }
}

# Adjust a vassal to a dependent coalition where they can choose when the liege does not have the right innovation and they did not previously have a coalition government form.
ATHA_vassal_contract.6 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_liege
		exists = scope:vassal_contract_holder

		NOT = { scope:vassal_contract_liege.culture = { has_innovation = innovation_classical_diplomatic_missions } }
		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_dependent_coalition_contract
			NOT = { government_has_flag = is_coalition_government }
		}
	}

    immediate = {
		scope:vassal_contract_holder = {
			trigger_event = ATHA_government.0007 # Vassal decides what coalition government to adopt
		}
    }
}

# Adjust a vassal to a civil bureaucracy government when their contract changes.
ATHA_vassal_contract.7 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_holder

		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_civil_bureaucracy_contract
			NOT = { has_government = bureaucracy_civil_government }
		}
	}

    immediate = {
		scope:vassal_contract_holder = {
			change_government_form = { GOVERNMENT = bureaucracy_civil_government }
		}
    }
}

# Adjust a vassal to a military bureaucracy government when their contract changes.
ATHA_vassal_contract.8 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_holder

		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_military_bureaucracy_contract
			NOT = { has_government = bureaucracy_military_government }
		}
	}

    immediate = {
		scope:vassal_contract_holder = {
			change_government_form = { GOVERNMENT = bureaucracy_military_government }
		}
    }
}

# Adjust a vassal to a dynastic government when their contract changes.
ATHA_vassal_contract.9 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_holder

		scope:vassal_contract_holder = {
			vassal_contract_has_flag = has_feudal_bureaucracy_contract
			NOT = { has_government = feudal_government }
		}
	}

    immediate = {
		scope:vassal_contract_holder = {
			change_government_form = { GOVERNMENT = feudal_government }

			#vassal_contract_set_obligation_level = {
			#	type = hereditary_rights
			#	level = hereditary_rights_guaranteed
			#}
		}
    }
}

# Adjust autonomy contracts when gaining autonomy.
ATHA_vassal_contract.10 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_holder
		scope:dependent_will_become_autonomous = yes
	}

    immediate = {
		scope:vassal_contract_holder = {
			if = {
				limit = {
					vassal_contract_has_flag = has_autonomous_contract
				}
				vassal_contract_set_obligation_level = {
					type = coinage_rights
					level = obligation_level_coinage_rights_granted
				}
				vassal_contract_set_obligation_level = {
					type = religious_rights
					level = obligation_level_religious_rights_protected
				}
				vassal_contract_set_obligation_level = {
					type = title_revocation_rights
					level = obligation_level_title_revocation_rights_protected
				}
				vassal_contract_set_obligation_level = {
					type = garrison_rights
					level = obligation_level_garrison_rights_none
				}
			}
		}
    }
}

# Adjust governments after changing enforced franchise.
ATHA_vassal_contract.11 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_holder
	}

    immediate = {
		scope:vassal_contract_holder = {
			if = {
				limit = {
					vassal_contract_has_flag = has_imposed_democratic_franchise
					NOT = { has_government = city_state_democratic_government }
				}
				change_government_form_to_democracy = yes
			}
			else_if = {
				limit = {
					vassal_contract_has_flag = has_imposed_oligarchic_franchise
					NOT = { has_government = city_state_oligarchic_government }
				}
				change_government_form_to_oligarchy = yes
			}
			else_if = {
				limit = {
					vassal_contract_has_flag = has_imposed_aristocratic_franchise
					NOT = { has_government = city_state_aristocratic_government }
				}
				change_government_form_to_aristocracy = yes
			}
			else_if = {
				limit = {
					vassal_contract_has_flag = has_imposed_tyrannic_franchise
					NOT = { has_government = city_state_tyrannical_government }
				}
				change_government_form_to_tyranny = yes
			}
		}
	}
}

# Adjust governments after changing enforced federalism.
ATHA_vassal_contract.12 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_holder
	}

    immediate = {
		scope:vassal_contract_holder = {
			if = {
				limit = {
					vassal_contract_has_flag = has_enforced_federalism_federal
					NOT = { government_has_flag = is_federal_government }
				}
				if = {
					limit = {
						government_has_flag = is_alliance_government
					}
					change_government_form = { GOVERNMENT = federal_alliance_government }
				}
				else_if = {
					limit = {
						government_has_flag = is_sympolity_government
					}
					change_government_form = { GOVERNMENT = federal_sympolity_government }
				}
				else_if = {
					limit = {
						government_has_flag = is_league_government
					}
					change_government_form = { GOVERNMENT = federal_league_government }
				}
			}
			else_if = {
				limit = {
					vassal_contract_has_flag = has_enforced_federalism_hegemonic
					NOT = { government_has_flag = is_hegemonic_government }
				}
				if = {
					limit = {
						government_has_flag = is_alliance_government
					}
					change_government_form = { GOVERNMENT = hegemonic_alliance_government }
				}
				else_if = {
					limit = {
						government_has_flag = is_sympolity_government
					}
					change_government_form = { GOVERNMENT = hegemonic_sympolity_government }
				}
				else_if = {
					limit = {
						government_has_flag = is_league_government
					}
					change_government_form = { GOVERNMENT = hegemonic_league_government }
				}
			}
		}
	}
}

# Adjust governments after changing enforced centralisation.
ATHA_vassal_contract.13 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_holder
	}

    immediate = {
		scope:vassal_contract_holder = {
			if = {
				limit = {
					vassal_contract_has_flag = has_enforced_centralisation_low
				}
				add_realm_law = crown_authority_0
			}
			else_if = {
				limit = {
					vassal_contract_has_flag = has_enforced_centralisation_medium
				}
				add_realm_law = crown_authority_1
			}
			else_if = {
				limit = {
					vassal_contract_has_flag = has_enforced_centralisation_high
				}
				add_realm_law = crown_authority_2
			}
		}
	}
}

# Adjust hooks after changing enforced contracts.
ATHA_vassal_contract.14 = {
	type = empty
	hidden = yes

	trigger = {
		exists = scope:vassal_contract_holder
	}

    immediate = {
		scope:vassal_contract_holder = {
			if = {
				limit = {
					vassal_contract_has_flag = vassal_contract_gives_weak_hook
					liege = {
						NOT = {
							has_hook_of_type = { 
								type = house_head_hook
								target = scope:vassal_contract_holder
							}
						}
					}
				}
				liege = {
					add_hook = {
						type = vassal_contract_weak_hook
						target = scope:vassal_contract_holder
					}	
				}
			}
			else_if = {
				limit = {
					vassal_contract_has_flag = vassal_contract_gives_strong_hook
					liege = {
						NOT = {
							has_hook_of_type = { 
								type = loyalty_hook
								target = scope:vassal_contract_holder
							}
						}
					}
				}
				liege = {
					add_hook = {
						type = vassal_contract_strong_hook
						target = scope:vassal_contract_holder
					}
				}
			}
			else_if = {
				limit = {
					NOT = { vassal_contract_has_flag = vassal_contract_gives_weak_hook }
					liege = {
						has_hook_of_type = { 
							type = vassal_contract_weak_hook
							target = scope:vassal_contract_holder
						}
					}	
				}
				liege = {
					remove_hook = {
						type = vassal_contract_weak_hook
						target = scope:vassal_contract_holder
					}
				}
			}
			else_if = {
				limit = {
					NOT = { vassal_contract_has_flag = vassal_contract_gives_strong_hook }
					liege = {
						has_hook_of_type = { 
							type = vassal_contract_strong_hook
							target = scope:vassal_contract_holder
						}	
					}
				}
				liege = {
					remove_hook = {
						type = vassal_contract_strong_hook
						target = scope:vassal_contract_holder
					}
				}
			}
		}
	}
}

# Save the contract settings on death.
ATHA_vassal_contract.50 = {
	type = empty
	hidden = yes

	# Only trigger this for landed, vassal rulers that can have contracts.
	trigger = {
		is_landed = yes
		is_independent_ruler = no
	}

	immediate = {
		every_heir = {
			set_variable = {
				name = highest_tier_before_inheritance
				value = highest_held_title_tier
			}

			save_vassal_contract_settings_of_character = { CHAR = root }
		}
	}
}

# Apply the contract settings to people who inherited titles.
ATHA_vassal_contract.51 = {
	type = empty
	hidden = yes

	trigger = {
		has_variable = highest_tier_before_inheritance
		scope:title= { tier > root.var:highest_tier_before_inheritance }
		is_independent_ruler = no
	}

	immediate = {
		apply_vassal_contract_settings = yes
		clear_vassal_contract_settings = yes

		remove_variable = highest_tier_before_inheritance
	}
}

# Save the contract settings when gaining titles.
ATHA_vassal_contract.52 = {
	type = empty
	hidden = yes

	trigger = {
		is_independent_ruler = no

		# The ruler should not have two titles of the same tier, which means that he already held a title.
		NOT = {
			any_held_title = {
				tier = root.primary_title.tier
				NOT = { this = scope:title }
			}
		}

		# Only trigger this when the circumstances for the transfer of the titles is correct.
		OR = {
			scope:transfer_type = flag:abdication
			scope:transfer_type = flag:election
			scope:transfer_type = flag:faction_demand
			scope:transfer_type = flag:usurped
		}
	}

	immediate = {
		save_vassal_contract_settings_of_character = { CHAR = scope:previous_holder }
		apply_vassal_contract_settings = yes
		clear_vassal_contract_settings = yes
	}
}