namespace = corruption

####
#0001 - 0002: Corruption change events
#By Grathalas
####

####
#1001 - 1005: Provide Vice events
# By Grathalas
####

############################
# CORRUPTION CHANGE EVENTS #
############################
corruption.0001 = {
	hidden = yes
	
	trigger = {
		has_corruption_trigger = yes
		NOR = {
			is_corrupt_trigger = yes
			has_trait = incorruptible
		}
		
	}

	immediate = {
		give_corrupt_secret_or_trait_effect = yes

		send_interface_message = {
			type = event_generic_bad_text
			title = corruption.0001.notification
			desc = gain_corrupt_secret_desc

			left_icon = root
		}
	}
}

corruption.0002 = {
	hidden = yes
	
	trigger = {
		has_corruption_trigger = yes
		NOR = {
			is_corrupt_trigger = yes
			has_trait = incorruptible
		}
	}

	immediate = {
		send_interface_message = {
			type = event_generic_good_text
			title = corruption.0002.notification
			desc = gain_incorruptible_trait_tooltip

			left_icon = root
		}

		add_trait = incorruptible
	}
}

#######################
# PROVIDE VICE EVENTS #
#######################

scripted_trigger corruption_1001_can_learn_owner_secret = {
	save_temporary_scope_as = secret_learner
	scope:owner = {
		any_secret = {
			secret_type = secret_corrupt
			NOT = { is_known_by = scope:secret_learner }
		}
	}
}

scripted_trigger corruption_1001_unlock_reveal_trigger = {
	NOT = { exists = scope:scheme_discovered }
	scope:target = { corruption_1001_can_learn_owner_secret = yes }
}

#Success
corruption.1001 = {
	type = character_event
	title = corruption.1001.t
	desc = corruption.1001.desc

	theme = corruption
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = happiness
	}

	immediate = {
		scope:target = {
			add_character_flag = {	
				flag = block_provide_vice
				days = 1825
			}
		}
	}

	#Show them the best night of their life
	option = {
		trigger = { corruption_1001_unlock_reveal_trigger = yes }
		name = corruption.1001.a

		scope:target = {
			send_interface_message = {
				type = event_generic_good
				title = corruption.1001.message
				left_icon = scope:owner
			}

			if = {
				limit = { NOT = { any_secret = { NOT = { is_known_by = root } } } }
				give_random_likely_secret_effect = yes
			}

			random_secret = {
				if = {
					limit = {
						NOT = { is_known_by = scope:owner }
					}
					reveal_to = scope:owner
					save_scope_as = juicy_secret
				}
			}

			stress_impact = {
				base = medium_stress_impact_loss
				paranoid = minor_stress_impact_gain
				content = minor_stress_impact_gain
				temperate = medium_stress_impact_gain
			}
		}

		reverse_add_opinion = {
			target = scope:target
			modifier = grateful_opinion
			opinion = 30
		}

		scope:scheme = {
			end_scheme = yes
		}

		add_hook = {
			type = loyalty_hook
			target = scope:target
		}

		pay_short_term_gold = {
			gold = major_gold_value
		}

		change_city_state_corruption = { AMOUNT_ARG = corruption_major_increase }
	}

	#Show them a good time
	option = {
		trigger = { corruption_1001_unlock_reveal_trigger = yes }
		name = corruption.1001.b

		scope:target = {
			stress_impact = {
				base = major_stress_impact_loss
				paranoid = medium_stress_impact_gain
				content = medium_stress_impact_gain
				temperate = major_stress_impact_gain
			}
		}

		reverse_add_opinion = {
			target = scope:target
			modifier = grateful_opinion
			opinion = 20
		}

		scope:scheme = {
			end_scheme = yes
		}

		add_hook = {
			type = favor_hook
			target = scope:target
		}

		pay_short_term_gold = {
			gold = medium_gold_value
		}

		change_city_state_corruption = { AMOUNT_ARG = corruption_medium_increase }
	}

	#Now is not the right time
	option = {
		name = corruption.1001.c

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		#Handle discover
		if = {
			limit = {
				exists = scope:scheme_discovered
				scope:target = {
					is_ai = yes
					OR = {
						AND = {
							is_ruler = no
							exists = liege
							liege = {
								corruption_1001_can_learn_owner_secret = yes
								NOT = { this = scope:owner }
							}
						}
						any_relation = { type = lover corruption_1001_can_learn_owner_secret = yes }
						any_consort = { corruption_1001_can_learn_owner_secret = yes }
						any_child = {
							age >= 7
							corruption_1001_can_learn_owner_secret = yes
						}
					}
				}
			}
			scope:target = { liege = { trigger_event = corruption.1002 } }
		}
	}
}

#Success, but discovered
corruption.1002 = {
	type = character_event
	title = corruption.1002.t
	desc = corruption.1002.desc

	theme = corruption
	override_background = {
		event_background = corridor_night
	}
	left_portrait = {
		character = scope:target
		animation = personality_rational
	}
	
	immediate = {
		hidden_effect = {
			scope:target = {
				random_list = {
					3 = {
						trigger = {
							is_ruler = no
							exists = liege
							liege = {
								corruption_1001_can_learn_owner_secret = yes
								NOT = { this = scope:owner }
							}
						}
						liege = { save_scope_as = listener }
					}
					5 = {
						trigger = {
							any_relation = { type = lover corruption_1001_can_learn_owner_secret = yes }
						}
						random_relation = {
							type = lover
							limit = { corruption_1001_can_learn_owner_secret = yes }
							save_scope_as = listener
						}
					}
					5 = {
						trigger = {
							any_consort = { corruption_1001_can_learn_owner_secret = yes }
						}
						random_consort = {
							limit = { corruption_1001_can_learn_owner_secret = yes }
							save_scope_as = listener
						}
					}
					1 = {
						trigger = {
							any_child = {
								age >= 7
								corruption_1001_can_learn_owner_secret = yes
							}
						}
						random_child = {
							limit = {
								age >= 7
								corruption_1001_can_learn_owner_secret = yes
							}
							save_scope_as = listener
						}
					}
				}
			}
			random_secret = {
				limit = { secret_type = secret_corrupt }
				reveal_to = scope:listener
			}
		}
	}

	option = {
		name = corruption.1002.a #write the loc
		custom_tooltip = corruption.1002.a.tt #write the loc
	}
}

#They refuse
corruption.1003 = {
	type = character_event
	title = corruption.1003.t
	desc = {
		desc = corruption.1003.start.desc
		first_valid = {
			triggered_desc = {
				trigger = { exists = scope:scheme_discovered }
				desc = corruption.1003.discovered.desc
			}
			desc = corruption.1003.not_discovered.desc
		}
	}
	theme = corruption
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = angry
	}

	immediate = {
		if = {
			limit = { exists = scope:scheme_discovered }
			random_secret = {
				limit = {
					secret_type = secret_corrupt
					NOT = { is_known_by = scope:target }
				}
				reveal_to = scope:target
			}
			reverse_add_opinion = {
				target = scope:target
				modifier = impious_opinion
				opinion = -20
			}
		}
		scope:target = {
			add_character_flag = {	
				flag = block_provide_vice
				days = 1825
			}
		}
	}

	option = {
		name = corruption.1003.a

		scope:scheme = {
			end_scheme = yes
		}
	}
}

#They tell their liege
corruption.1004 = {
	type = character_event
	title = corruption.1003.t
	desc = {
		desc = corruption.1003.start.desc
		desc = corruption.1004.end.desc
	}
	theme = corruption
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:target
		animation = angry
	}
	trigger = {
		scope:target = {
			exists = liege
			is_ruler = no
			liege = { NOT = { this = scope:owner } }
		}
		exists = scope:scheme_discovered
	}

	weight_multiplier = {
		base = 1

		ai_value_modifier = {
			who = scope:target
			ai_zeal = 0.05
			max = 2
			min = -0.5
		}
		opinion_modifier = {
			who = scope:target
			opinion_target = root
			multiplier = -0.05
			max = 2
			min = -0.5
		}
	}


	immediate = {
		random_secret = {
			limit = {
				secret_type = secret_corrupt
			}
			if = {
				limit = { NOT = { is_known_by = scope:target } }
				reveal_to = scope:target
			}
			if = {
				limit = { NOT = { is_known_by = scope:target.liege } }
				reveal_to = scope:target.liege
			}
		}
		scope:target = {
			add_character_flag = {	
				flag = block_provide_vice
				days = 1825
			}
		}
		reverse_add_opinion = {
			target = scope:target
			modifier = impious_opinion
			opinion = -20
		}
	}

	option = {
		name = corruption.1004.a
		flavor = corruption.1004.a.tt

		scope:scheme = {
			end_scheme = yes
		}
	}
}

#Someone is trying to corrupt me (player only)
corruption.1005 = {
	type = character_event
	title = corruption.1005.t
	desc = corruption.1005.desc
	theme = corruption
	override_background = {
		event_background = sitting_room
	}
	left_portrait = {
		character = scope:left_portrait
		triggered_animation = {
			trigger = { scope:left_portrait = root }
			animation = disbelief
		}
		animation = personality_dishonorable
	}
	
	immediate = {
		if = {
			limit = { exists = scope:scheme_discovered }
			scope:owner = {
				save_scope_as = left_portrait
				show_as_tooltip = {
					random_secret = {
						limit = {
							secret_type = secret_corrupt
							NOT = { is_known_by = root }
						}
						reveal_to = root
					}
				}
			}
		}
		else = {
			save_scope_as = left_portrait
		}
	}

	#Yes I want to indulge a vice
	option = {
		name = corruption.1005.a

		show_as_tooltip = {
			give_deviant_secret_or_trait_effect = yes
		}

		add_prestige = medium_prestige_loss
		
		scope:owner = {
			trigger_event = corruption.1001
		}
	}

	#No I don't want to indulge a vice
	option = {
		name = corruption.1005.b

		scope:owner = {
			trigger_event = corruption.1003
		}

		add_prestige = minor_prestige_gain

		if = {
			limit = { exists = scope:scheme_discovered }
			reverse_add_opinion = {
				target = scope:owner
				modifier = disappointed_opinion
				opinion = -15
			}
		}
	}
	
	#Reveal them to the world!
	option = {
		trigger = { exists = scope:scheme_discovered }
		name = corruption.1005.c

		add_prestige = medium_prestige_gain

		reverse_add_opinion = {
			target = scope:owner
			modifier = hate_opinion
			opinion = -30
		}

		scope:owner = {
			trigger_event = corruption.1004
		}

		stress_impact = {
			greedy = medium_stress_impact_gain
			trusting = minor_stress_impact_gain
		}
	}
}