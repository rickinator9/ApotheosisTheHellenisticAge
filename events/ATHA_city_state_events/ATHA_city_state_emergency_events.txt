namespace = city_state_emergency

# Events related to emergencies occurring in city states.

###
# 0001-0100: Mercenary mutiny emergency
# by Rick 'rickinator9' Visser
###
# 0001-0010: Entry point.
#	 0001: Mercenary mutiny entry point.
#	 0002: Mercenary mutiny is communicated to the ruler.
#	 0003: Councilors have to decide which solution to suggest to the ruler.
#	 0004: Ruler chooses the advice from the councillors.
# 0011-0100: Flavour events.
#	 0011: The court chaplain gets caught while stealing from the temple treasury.
#	 0012: The ruler hears about it...

#region Region
city_state_emergency.0001 = {
	type = character_event
	title = city_state_emergency.0001.t
	desc = city_state_emergency.0001.desc

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}
	right_portrait = {
		character = scope:mutiny_ringleader
		animation = ecstasy # TODO: Customize this.
	}

	# trigger = { # TODO
	# 	exists = liege
	# 	liege = {
	# 		# The liege must not be at war and must be in debt. This means that mercs have no way to get money, as in war they would have been able to pillage.
	# 		is_at_war = no
	# 		gold < 0

	# 		# The liege must be a city state and must not already be dealing with the issue.
	# 		has_government = city_state_democratic_government
	# 		NOT = { has_emergency_mercenary_mutiny = yes }

	# 		# The liege must have a marshal and that marshal must be this character.
	# 		exists = cp:councillor_marshal
	# 		cp:councillor_marshal = ROOT

	# 		# The liege must have a mercenary company that does not expire within a year.
	# 		any_hired_mercenary = {
	# 			mercenary_company_expiration_days > 365
	# 		}
	# 	}
	# }

	# weight_multiplier = {
	# 	base = 1 # TODO
	# }

	immediate = {
		# Spawn the ringleader of the mutiny.
		hidden_effect = {
			liege = {
				random_sub_realm_county = {
					save_scope_as = origin
				}

				if = {
					limit = {
						exists = capital_province
					}
					capital_province = { save_scope_as = target_location }
				}
				else = {
					location = { save_scope_as = target_location }
				}

				create_character = {
					gender_female_chance = root_soldier_female_chance
					location = scope:target_location
					template = new_warrior_character
					faith = scope:origin.faith
					culture = scope:origin.culture

					save_scope_as = mutiny_ringleader
				}
			}

			add_visiting_courtier = scope:mutiny_ringleader
		}

		# Store the current character as the reporter of the mutiny.
		save_scope_as = mutiny_reporter
	}

	option = {
		name = city_state_emergency.0001.a

		liege = {
			trigger_event = { id = city_state_emergency.0002 days = 4 }
		}
	}
}

city_state_emergency.0002 = {
	type = character_event
	title = city_state_emergency.0002.t
	desc = city_state_emergency.0002.desc

	theme = martial
	left_portrait = {
		character = scope:mutiny_reporter
		animation = ecstasy # TODO: Customize this.
	}
	right_portrait = {
		character = scope:mutiny_ringleader
		animation = ecstasy # TODO: Customize this.
	}

	option = {
		name = city_state_emergency.0002.a

		add_emergency_mercenary_mutiny = yes

		custom_tooltip = CITY_STATE_ISSUES_COUNCIL_CALLED_TOOLTIP
		hidden_effect = {
			every_councillor = {
				trigger_event = city_state_emergency.0003
			}
			trigger_event = { id = city_state_emergency.0004 days = 4 }
		}
	}
}

city_state_emergency.0003 = {
	type = character_event
	title = city_state_emergency.0003.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:mutiny_reporter = ROOT
				}
				desc = city_state_emergency.0003.reporter_desc
			}
			desc = city_state_emergency.0003.desc
		}
	}
	theme = martial

	left_portrait = {
		character = scope:liege
		animation = ecstasy # TODO: Customize this.
	}
	right_portrait = {
		character = scope:mutiny_ringleader
		animation = ecstasy # TODO: Customize this.
	}

	# COURT CHAPLAIN OPTIONS
	# Utilise temple gold to pay off the mercenaries.
	option = {
		name = city_state_emergency.0003.court_chaplain.temple_gold
		trigger = { has_council_position = councillor_court_chaplain }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = court_chaplain
			VALUE_ARG = flag:temple_gold
		}
	}
	# Falsely interpret omens as bad for the mercenary troops. (Only makes sense if the mercs are from the same religious group?)
	# option = {
	# 	name = city_state_emergency.0003.court_chaplain.false_omens
	# 	trigger = { has_council_position = councillor_court_chaplain }

	# 	add_solution_proposal = {
	# 		ID_ARG = emergency_mercenary_mutiny
	# 		COUNCILLOR_ARG = court_chaplain
	# 		VALUE_ARG = flag:false_omens
	# 	}
	# }
	# # No advice.
	# option = {
	# 	name = city_state_emergency.0003.court_chaplain.no_advice
	# 	trigger = { has_council_position = councillor_court_chaplain }

	# 	add_solution_proposal = {
	# 		ID_ARG = emergency_mercenary_mutiny
	# 		COUNCILLOR_ARG = court_chaplain
	# 		VALUE_ARG = flag:none
	# 	}
	# }

	# CHANCELLOR OPTIONS
	# Try to enlist the help of a neighbouring city state.
	option = {
		name = city_state_emergency.0003.chancellor.neighbour_help
		trigger = { has_council_position = councillor_chancellor }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = chancellor
			VALUE_ARG = flag:neighbour_help
		}
	}
	# Try to discredit the ringleader.
	option = {
		name = city_state_emergency.0003.chancellor.discredit_ringleader
		trigger = { has_council_position = councillor_chancellor }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = chancellor
			VALUE_ARG = flag:discredit_ringleader
		}
	}
	# No advice.
	option = {
		name = city_state_emergency.0003.chancellor.no_advice
		trigger = { has_council_position = councillor_chancellor }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = chancellor
			VALUE_ARG = flag:none
		}
	}

	# STEWARD OPTIONS.
	# Raise a special tax to pay off the mercenaries.
	option = {
		name = city_state_emergency.0003.steward.special_tax
		trigger = { has_council_position = councillor_steward }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = steward
			VALUE_ARG = flag:special_tax
		}
	}
	# Embezzle funds (Theorika or Stratioka) to pay off the mercenaries.
	option = {
		name = city_state_emergency.0003.steward.embezzle_funds
		trigger = { has_council_position = councillor_steward }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = steward
			VALUE_ARG = flag:embezzle_funds
		}
	}
	# Offer to settle the mercenaries in our territory.
	option = {
		name = city_state_emergency.0003.steward.settlement
		trigger = { has_council_position = councillor_steward }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = steward
			VALUE_ARG = flag:settlement
		}
	}
	# No advice.
	option = {
		name = city_state_emergency.0003.steward.no_advice
		trigger = { has_council_position = councillor_steward }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = steward
			VALUE_ARG = flag:none
		}
	}

	# MARSHAL OPTIONS
	# We should strike against the dissidents now!
	option = {
		name = city_state_emergency.0003.marshal.first_strike
		trigger = { has_council_position = councillor_marshal }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = marshal
			VALUE_ARG = flag:first_strike
		}
	}
	# Duel the ringleader to kill or discredit him.
	option = {
		name = city_state_emergency.0003.marshal.duel
		trigger = { has_council_position = councillor_marshal }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = marshal
			VALUE_ARG = flag:duel
		}
	}
	# Attempt to form the mercenaries into a regiment.
	option = {
		name = city_state_emergency.0003.marshal.regiment
		trigger = { has_council_position = councillor_marshal }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = marshal
			VALUE_ARG = flag:regiment
		}
	}
	# No advice.
	option = {
		name = city_state_emergency.0003.marshal.no_advice
		trigger = { has_council_position = councillor_marshal }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = marshal
			VALUE_ARG = flag:none
		}
	}

	# SPYMASTER OPTIONS
	# We should kill the ringleader.
	option = {
		name = city_state_emergency.0003.spymaster.assassinate_ringleader
		trigger = { has_council_position = councillor_spymaster }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = spymaster
			VALUE_ARG = flag:assassinate_ringleader
		}
	}
	# We should assassinate ALL mercenaries.
	option = {
		name = city_state_emergency.0003.spymaster.kill_mercenaries
		trigger = { has_council_position = councillor_spymaster }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = spymaster
			VALUE_ARG = flag:kill_mercenaries
		}
	}
	# We should bribe the ringleader.
	option = {
		name = city_state_emergency.0003.spymaster.bribe_ringleader
		trigger = { has_council_position = councillor_spymaster }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = spymaster
			VALUE_ARG = flag:bribe_ringleader
		}
	}
	# No advice.
	option = {
		name = city_state_emergency.0003.spymaster.no_advice
		trigger = { has_council_position = councillor_spymaster }

		add_solution_proposal = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = spymaster
			VALUE_ARG = flag:none
		}
	}
}

city_state_emergency.0004 = {
	type = character_event
	title = city_state_emergency.0004.t
	desc = {
		desc = city_state_emergency.0004.preface_desc
		first_valid = {
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_court_chaplain
						var:emergency_mercenary_mutiny_proposal_court_chaplain = flag:temple_gold
					}
				}
				desc = city_state_emergency.0004.court_chaplain.temple_gold
			}
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_court_chaplain
						var:emergency_mercenary_mutiny_proposal_court_chaplain = flag:false_omens
					}
				}
				desc = city_state_emergency.0004.court_chaplain.false_omens
			}
			desc = city_state_emergency.0004.court_chaplain.no_advice
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_chancellor
						var:emergency_mercenary_mutiny_proposal_chancellor = flag:neighbour_help
					}
				}
				desc = city_state_emergency.0004.chancellor.neighbour_help
			}
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_chancellor
						var:emergency_mercenary_mutiny_proposal_chancellor = flag:discredit_ringleader
					}
				}
				desc = city_state_emergency.0004.chancellor.discredit_ringleader
			}
			desc = city_state_emergency.0004.chancellor.no_advice
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_steward
						var:emergency_mercenary_mutiny_proposal_steward = flag:special_tax
					}
				}
				desc = city_state_emergency.0004.steward.special_tax
			}
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_steward
						var:emergency_mercenary_mutiny_proposal_steward = flag:embezzle_funds
					}
				}
				desc = city_state_emergency.0004.steward.embezzle_funds
			}
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_steward
						var:emergency_mercenary_mutiny_proposal_steward = flag:settlement
					}
				}
				desc = city_state_emergency.0004.steward.settlement
			}
			desc = city_state_emergency.0004.steward.no_advice
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_marshal
						var:emergency_mercenary_mutiny_proposal_marshal = flag:first_strike
					}
				}
				desc = city_state_emergency.0004.marshal.first_strike
			}
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_marshal
						var:emergency_mercenary_mutiny_proposal_marshal = flag:duel
					}
				}
				desc = city_state_emergency.0004.marshal.duel
			}
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_marshal
						var:emergency_mercenary_mutiny_proposal_marshal = flag:regiment
					}
				}
				desc = city_state_emergency.0004.marshal.regiment
			}
			desc = city_state_emergency.0004.marshal.no_advice
		}
		first_valid = {
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_spymaster
						var:emergency_mercenary_mutiny_proposal_spymaster = flag:assassinate_ringleader
					}
				}
				desc = city_state_emergency.0004.spymaster.assassinate_ringleader
			}
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_spymaster
						var:emergency_mercenary_mutiny_proposal_spymaster = flag:kill_mercenaries
					}
				}
				desc = city_state_emergency.0004.spymaster.kill_mercenaries
			}
			triggered_desc = {
				trigger = {
					primary_title = { 
						has_variable = emergency_mercenary_mutiny_proposal_spymaster
						var:emergency_mercenary_mutiny_proposal_spymaster = flag:bribe_ringleader
					}
				}
				desc = city_state_emergency.0004.spymaster.bribe_ringleader
			}
			desc = city_state_emergency.0004.spymaster.no_advice
		}
	}

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	immediate = {
		# Set scopes for the councillors to populate localisation.
		every_councillor = {
			if = {
				limit = { has_council_position = councillor_court_chaplain }
				save_scope_as = court_chaplain
			}
			if = {
				limit = { has_council_position = councillor_chancellor }
				save_scope_as = chancellor
			}
			if = {
				limit = { has_council_position = councillor_steward }
				save_scope_as = steward
			}
			if = {
				limit = { has_council_position = councillor_marshal }
				save_scope_as = marshal
			}
			if = {
				limit = { has_council_position = councillor_spymaster }
				save_scope_as = spymaster
			}
		}
	}

	option = {
		name = city_state_emergency.0004.court_chaplain
		trigger = {
			primary_title = { 
				has_variable = emergency_mercenary_mutiny_proposal_court_chaplain
				NOT = { var:emergency_mercenary_mutiny_proposal_court_chaplain = flag:none }
			}
		}
		if = {
			limit = {
				primary_title = { 
					var:emergency_mercenary_mutiny_proposal_court_chaplain = flag:temple_gold
				}
			}

			custom_tooltip = CITY_STATE_CORRUPTION_INCREASE_POTENTIAL_TOOLTIP
		}

		set_solution = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = court_chaplain
		}

		create_story = city_state_mercenary_emergency_story
	}
	option = {
		name = city_state_emergency.0004.chancellor
		trigger = {
			primary_title = { 
				has_variable = emergency_mercenary_mutiny_proposal_chancellor
				NOT = { var:emergency_mercenary_mutiny_proposal_chancellor = flag:none }
			}
		}

		set_solution = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = chancellor
		}
	}
	option = {
		name = city_state_emergency.0004.steward
		trigger = {
			primary_title = { 
				has_variable = emergency_mercenary_mutiny_proposal_steward
				NOT = { var:emergency_mercenary_mutiny_proposal_steward = flag:none }
			}
		}
		if = {
			limit = {
				primary_title = { 
					var:emergency_mercenary_mutiny_proposal_steward = flag:embezzle_funds
				}
			}

			custom_tooltip = CITY_STATE_CORRUPTION_INCREASE_POTENTIAL_TOOLTIP
		}

		set_solution = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = steward
		}
	}
	option = {
		name = city_state_emergency.0004.marshal
		trigger = {
			primary_title = { 
				has_variable = emergency_mercenary_mutiny_proposal_marshal
				NOT = { var:emergency_mercenary_mutiny_proposal_marshal = flag:none }
			}
		}

		set_solution = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = marshal
		}
	}
	option = {
		name = city_state_emergency.0004.spymaster
		trigger = {
			primary_title = { 
				has_variable = emergency_mercenary_mutiny_proposal_spymaster
				NOT = { var:emergency_mercenary_mutiny_proposal_spymaster = flag:none }
			}
		}
		if = {
			limit = {
				primary_title = { 
					var:emergency_mercenary_mutiny_proposal_spymaster = flag:bribe_ringleader
				}
			}

			custom_tooltip = CITY_STATE_CORRUPTION_INCREASE_GUARANTEE_TOOLTIP
		}

		set_solution = {
			ID_ARG = emergency_mercenary_mutiny
			COUNCILLOR_ARG = spymaster
		}
	}
}

#####
#
#	PRIEST STEALS FROM TEMPLE FLAVOUR EVENTS.
#
#####

# The Court Chaplain get caught while stealing from the temple treasury.
city_state_emergency.0011 = {
	type = character_event
	title = city_state_emergency.0011.t
	desc = city_state_emergency.0011.desc

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	option = {
		name = city_state_emergency.0011.a

		save_scope_as = court_chaplain

		liege = {
			trigger_event = city_state_emergency.0012 
		}
	}
}

# The ruler is informed.
city_state_emergency.0012 = {
	type = character_event
	title = city_state_emergency.0012.t
	desc = city_state_emergency.0012.desc

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	option = {
		name = city_state_emergency.0012.a

		change_city_state_corruption = { AMOUNT_ARG = corruption_major_increase }

		# Remove piety from both wrongdoers now that their evil is revealed.
		add_piety = {
			value = major_piety_loss
			multiply = 0.75
		}
		scope:court_chaplain = {
			add_piety = major_piety_loss
		}

		# TODO: Inform the assembly if democratic.
		# TODO: Inform the population otherwise.
	}
}

# The priest is offered an armour.
city_state_emergency.0013 = {
	type = character_event
	title = city_state_emergency.0013.t
	desc = city_state_emergency.0013.desc

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	immediate = {
		# Save scopes for future events.
		save_scope_as = councillor_char
		liege = { save_scope_as = liege_char }
	}

	# A diplomatically skilled councillor may have a rich collector within his network.
	option = {
		name = city_state_emergency.0013.a
		trigger = {
			diplomacy >= decent_skill_rating
		}

		trigger_event = city_state_emergency.0014
	}

	# Someone less connected can pawn it.
	option = {
	 	name = city_state_emergency.0013.b
	 	trigger_event = city_state_emergency.0016
	}

	# The priest can take it for himself.
	option = {
	 	name = city_state_emergency.0013.c
	 	trigger_event = city_state_emergency.0017
	}

	# # The priest can let it go.
	# option = {
	# 	name = city_state_emergency.0013.d

	# 	# TODO:

	# 	add_piety = minor_piety_gain
	# }
}

# The priest visits a collector that may want to buy the armour.
city_state_emergency.0014 = {
	type = character_event
	title = city_state_emergency.0014.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					has_variable = armour_collector_great_outcome
				}
				desc = city_state_emergency.0014.great_outcome_desc
			}
			triggered_desc = {
				trigger = {
					has_variable = armour_collector_good_outcome
				}
				desc = city_state_emergency.0014.good_outcome_desc
			}
			desc = city_state_emergency.0014.bad_outcome_desc
		}
	}

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	immediate = {
		# Determine the outcome of bartering with the collector.
		random_list = {
			33 = {
				modifier = {
					factor = 1.1
					stewardship >= decent_skill_rating
				}
				modifier = {
					factor = 1.3
					stewardship >= high_skill_rating
				}
				modifier = {
					factor = 1.6
					stewardship >= very_high_skill_rating
				}
				modifier = {
					factor = 2
					stewardship >= extremely_high_skill_rating
				}

				set_variable = armour_collector_great_outcome
			}
			33 = {
				set_variable = armour_collector_good_outcome
			}
			33 = {
				modifier = {
					factor = 2
					stewardship < mediocre_skill_rating
				}
				modifier = {
					factor = 2
					stewardship < low_skill_rating
				}
				
				set_variable = armour_collector_bad_outcome
			}
		}
	}

	# The loyal councillor gives all of the proceeds to the liege.
	option = {
		name = city_state_emergency.0014.a
		# TODO: AI, Stress
		liege = { trigger_event = city_state_emergency.0015 }
	}

	# Councillor keeps a small amount for himself.
	option = {
		name = city_state_emergency.0014.b
		# TODO: AI, Stress

		set_variable = armour_embezzle_money
		if = {
			limit = { has_variable = armour_collector_great_outcome }

			add_gold = {
				value = armour_great_sell_value
				multiply = armour_embezzle_councillor_factor
			}
		} else_if = {
			limit = { has_variable = armour_collector_good_outcome }

			add_gold = {
				value = armour_good_sell_value
				multiply = armour_embezzle_councillor_factor
			}

		} else = {
			add_gold = {
				value = armour_bad_sell_value
				multiply = armour_embezzle_councillor_factor
			}
		}

		liege = { trigger_event = city_state_emergency.0015 }
	}
}


# The ruler receives the money from selling the armour to the collector.
city_state_emergency.0015 = {
	type = character_event
	title = city_state_emergency.0015.t
	desc = city_state_emergency.0015.desc

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	option = {
		name = {
			trigger = { scope:councillor_char = { has_variable = armour_collector_great_outcome } }
			text = city_state_emergency.0015.great
		}
		name = {
			trigger = { 
				scope:councillor_char = {
					OR = {
						has_variable = armour_collector_good_outcome 
						has_variable = armour_pawn_outcome
					}
				} 
			}
			text = city_state_emergency.0015.good
		}
		name = {
			trigger = { scope:councillor_char = { has_variable = armour_collector_bad_outcome } }
			text = city_state_emergency.0015.bad
		}		

		if = { # The councillor embezzled some money.
			limit = { scope:councillor_char = { has_variable = armour_embezzle_money } }

			if = {
				limit = { scope:councillor_char = { has_variable = armour_collector_great_outcome } }
				add_gold = {
					value = armour_great_sell_value
					multiply = armour_embezzle_liege_factor
				}
			} else_if = {
				limit = { scope:councillor_char = { has_variable = armour_collector_good_outcome } }
				add_gold = {
					value = armour_good_sell_value
					multiply = armour_embezzle_liege_factor
				}
			} else_if = {
				limit = { scope:councillor_char = { has_variable = armour_pawn_outcome } }
				add_gold = {
					value = armour_pawn_sell_value
					multiply = armour_embezzle_liege_factor
				}
			} else = {
				add_gold = {
					value = armour_bad_sell_value
					multiply = armour_embezzle_liege_factor
				}
			}
		} else = { # Everything goes to the liege.
			if = {
				limit = { scope:councillor_char = { has_variable = armour_collector_great_outcome } }
				add_gold = armour_great_sell_value
			} else_if = {
				limit = { scope:councillor_char = { has_variable = armour_collector_good_outcome } }
				add_gold = armour_good_sell_value
			} else_if = {
				limit = { scope:councillor_char = { has_variable = armour_pawn_outcome } }
				add_gold = armour_pawn_sell_value
			} else = {
				add_gold = armour_bad_sell_value
			}
		}

		# Clean up variables.
		scope:councillor_char = {
			remove_variable = armour_collector_great_outcome
			remove_variable = armour_collector_good_outcome
			remove_variable = armour_pawn_outcome
			remove_variable = armour_collector_bad_outcome
			remove_variable = armour_embezzle_money
		}
	}
}

# The priest pawns off the armour.
city_state_emergency.0016 = {
	type = character_event
	title = city_state_emergency.0016.t
	desc = city_state_emergency.0016.desc

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	immediate = {
		set_variable = armour_pawn_outcome
	}

	# The councillor sends all of the money to his liege.
	option = {
		name = city_state_emergency.0016.a
		# TODO: AI, Stress
		liege = { trigger_event = city_state_emergency.0015 }
	}

	# The councillor embezzles some money.
	option = {
		name = city_state_emergency.0016.b
		# TODO: AI, Stress

		set_variable = armour_embezzle_money
		add_gold = {
			value = armour_pawn_sell_value
			multiply = armour_embezzle_councillor_factor
		}

		liege = { trigger_event = city_state_emergency.0015 }
	}
}

# The priest takes the armour for themselves.
city_state_emergency.0017 = {
	type = character_event
	title = city_state_emergency.0017.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					# Characters that can not fight will not be able to wear the armour.
					NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = scope:liege_char } }
				}
				desc = city_state_emergency.0017.noncombatant_desc
			}
			triggered_desc = {
				trigger = {
					# Fat characters can not wear the armour.
					has_character_modifier = obese_modifier
				}
				desc = city_state_emergency.0017.fat_desc
			}

			# Otherwise they will wear the armour in battle.
			desc = city_state_emergency.0017.default_desc
		}
	}

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	# The councillor can wear the armour.
	option = {
		name = city_state_emergency.0017.equip
		trigger = {
			can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = scope:liege_char }
			NOT = { has_character_modifier = obese_modifier }
		}
		
		add_character_modifier = { modifier = bronze_armour_combat_modifier }
	}

	# They can not.
	option = {
		name = {
			trigger = {
				NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = scope:liege_char } }
			}
			text = city_state_emergency.0017.noncombatant
		}
		name = {
			trigger = { has_character_modifier = obese_modifier }
			text = city_state_emergency.0017.stretcher
		}
		trigger = {
			OR = {
				NOT = { can_be_combatant_based_on_gender_trigger = { ARMY_OWNER = scope:liege_char } }
				has_character_modifier = obese_modifier
			}
		}

		add_character_modifier = { modifier = bronze_armour_display_modifier }
	}
}

# The priest loses weight and can wear the armour.
city_state_emergency.0018 = {
	type = character_event
	title = city_state_emergency.0018.t
	desc = city_state_emergency.0018.desc

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	trigger = {
		AND = {
			NOT = { has_character_modifier = obese_modifier }
			has_character_modifier = bronze_armour_display_modifier
		}
	}

	immediate = {
		remove_character_modifier = bronze_armour_display_modifier
		add_character_modifier = { modifier = bronze_armour_combat_modifier }
	}

	option = {
		name = city_state_emergency.0018.a
	}
}

# The priest gains weight and can no longer wear the armour.
city_state_emergency.0019 = {
	type = character_event
	title = city_state_emergency.0019.t
	desc = city_state_emergency.0019.desc

	theme = martial
	left_portrait = {
		character = ROOT
		animation = ecstasy # TODO: Customize this.
	}

	trigger = {
		AND = {
			has_character_modifier = obese_modifier
			has_character_modifier = bronze_armour_combat_modifier
		}
	}

	immediate = {
		remove_character_modifier = bronze_armour_combat_modifier
		add_character_modifier = { modifier = bronze_armour_display_modifier }
	}

	option = {
		name = city_state_emergency.0019.a
	}
}
#endregion