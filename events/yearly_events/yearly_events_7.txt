namespace = yearly

####
# 7001 - marshal suspecting factions are going to target you by Isabella welch
# 7002 - your marshal tells you about their suspicions
# 7003 - knights attempt to kidnap you
# 7004 - attempted coup by a faction
###
scripted_trigger can_detect_coup_trigger = { #will you unlock the option to ask your marshal why they are afraid
	OR = {
		scope:marshal = {
			opinion = {
				target = root
				value >= medium_positive_opinion
			}
		}
		has_relation_friend = scope:marshal
		has_trait = schemer
		has_lifestyle = intrigue_lifestyle
	}
}

scripted_trigger valid_coup_leader_trigger = {
	OR = {
		is_leading_faction_type = independence_faction
		is_leading_faction_type = liberty_faction
		is_leading_faction_type = claimant_faction
		is_leading_faction_type = populist_faction
	}
	NOT = { has_council_position = councillor_marshal }
	is_ai = yes
}

### A faction tries to stage a coup during court being held by Isabella Welch

yearly.7001 = {
	type = character_event
	title = yearly.7001.t
	desc = yearly.7001.desc
	theme = martial

	override_background = {
		event_background = bedchamber
	}
	left_portrait = {
		character = root
		animation = personality_bold
	}
	right_portrait = {
		character = scope:marshal
		animation = worry
	}
	
	trigger = {
		NOT = { has_character_flag = had_first_coup_event }
		any_vassal = {
			valid_coup_leader_trigger = yes
		}
		exists = cp:councillor_marshal
		cp:councillor_marshal = {
			is_ai = yes
		}
		any_knight = { count >= 2 }
		any_vassal = {
			count >=3
			is_a_faction_member = no
		}
		has_ep1_dlc_trigger = yes
		has_royal_court = yes
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		add_character_flag = had_first_coup_event
		cp:councillor_marshal = { save_scope_as = marshal }
		set_signature_weapon_effect = yes
		random_vassal = {
			limit = { valid_coup_leader_trigger = yes }
			save_scope_as = coup_leader
			joined_faction = {
				save_scope_as = coup_faction 
			}	
		}
		random_knight = { #knight loyalty is going to matter, if they are both disloyal you are likelier to get the knights kidnapping you event
			weight = {
				base = 1
				compare_modifier = {
					value = prowess
					multiplier = 0.5
				}
				modifier = {
					trigger = {
						AND = {
							opinion = {
								target = root
								value < medium_positive_opinion
							}
							is_a_faction_member = yes
						}
						NOT = {
							root = { can_detect_coup_trigger = yes }
						}
					}
					factor = 10
				}
			}
			save_scope_as = knight_1
		}
		random_knight = {
			limit = { NOT = { scope:knight_1 = this } }
			weight = {
				base = 1
				compare_modifier = {
					value = prowess
					multiplier = 0.5
				}
				modifier = {
					trigger = {
						AND = {
							opinion = {
								target = root
								value < medium_positive_opinion
							}
							is_a_faction_member = yes
						}
						NOT = {
							root = {  can_detect_coup_trigger = yes}
						}
					}
					factor = 2
				}
			}
			save_scope_as = knight_2
		}
	}

	option = { #likelier someone will die if you don't get the knights kidnapping event
		name = yearly.7001.a
		add_character_flag = ignored_guard_patrols
		change_current_court_grandeur = medium_court_grandeur_gain
		stress_impact = {
			brave = medium_stress_loss
			arbitrary = medium_stress_loss
			craven = massive_stress_gain
			paranoid = major_stress_gain
		}
	}

	option = { #likelier you will defend your court well in 7005
		name = yearly.7001.b
		change_current_court_grandeur = medium_court_grandeur_loss
	}
	
	option = { #marshal will run away and send you a letter warning you if you win the toast
		name = yearly.7001.c
		trigger = {
			can_detect_coup_trigger = yes
		}
		duel = {
			skill = intrigue
			target = scope:marshal
			20 = {
				custom_tooltip = yearly.7001.c.tt
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				trigger_event = {
					id = yearly.7002
					days = { 10 20 }
				}
				add_character_flag = marshal_letter_event
			}
			5 = {		
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				scope:marshal = {
					add_opinion = {
						target = root
						modifier = falsely_accused
					}
				}
				hidden_effect = {
					send_interface_toast = {
						left_icon = scope:marshal
						title = yearly.7001.tt
						show_as_tooltip = { 
							scope:marshal = {
								add_opinion = {
									target = root
									modifier = falsely_accused
								}
							}
						}
					}
				}
			}
		}
	}

	option = { #critically likely to help, might disband the faction
		name = yearly.7001.d
		add_character_flag = increased_guard_patrols
		duel = {
			skill = martial
			value = 14
			30 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				add_dread = medium_dread_gain
				send_interface_toast = {
					left_icon = scope:marshal
					title = yearly.7001.d.win.tt
					show_as_tooltip = { 
						scope:coup_faction = { #I am not 100% sure if this effect actually works
							every_faction_member = {
								custom = custom.all_faction_members
								leave_faction_with_cooldown_effect = {
									FACTION = scope:coup_faction
									YEARS = 20
								}
							}
						}
					}
				}
				scope:coup_faction = {
					every_faction_member = {
						custom = custom.all_faction_members
						leave_faction_with_cooldown_effect = {
							FACTION = scope:coup_faction
							YEARS = 20
						}
					}
				}
			}
			60 = {		
				compare_modifier = {
					value = scope:duel_value
					multiplier = -0.5
					min = -49
				}
				send_interface_toast = {
					left_icon = scope:marshal
					title = yearly.7001.d.tt
					show_as_tooltip = {
						every_courtier_or_guest = {
							custom = all_courtiers_and_guests
							add_opinion = {
								target = root
								modifier = frightened_in_court_opinion
								opinion = -5
							}
						}	
					}
				}
				change_current_court_grandeur = medium_court_grandeur_loss
				every_courtier_or_guest = {
					limit = {
						NOR = { 
							has_trait = brave
							has_trait = craven
						}
					}
					custom = all_courtiers_and_guests
					add_opinion = {
						target = root
						modifier = frightened_in_court_opinion
						opinion = -5
					}
				}
				every_courtier_or_guest = {
					limit = { has_trait = craven }
					custom = all_craven_in_the_court
					add_opinion = {
						target = root
						modifier = frightened_in_court_opinion
						opinion = -15
					}
				}
			}
		}
	}

	after = {
		hidden_effect = {
			random_list = {
				10 = {
					trigger = {
						NOT = { has_character_flag = marshal_letter_event }
						scope:knight_1 = {
							opinion = {
								target = root
								value < medium_positive_opinion
							}
						}
						scope:knight_2 = {
							opinion = {
								target = root
								value < medium_positive_opinion
							}
						}
						NOR = {
							scope:marshal = {
								opinion = {
									target = root
									value >= medium_positive_opinion
								}
							}
							has_relation_friend = scope:marshal
							has_trait = schemer
							has_lifestyle = intrigue_lifestyle
						}
					}
					trigger_event = {
						id = yearly.7004
						days = 30
					}
				}
				10 = {
					trigger = { NOT = { has_character_flag = marshal_letter_event } }
					duel = {
						skill = martial
						target = scope:coup_leader
						50 = {		
							compare_modifier = {
								value = scope:duel_value
								multiplier = 3.5
								min = -49
							}
							add_character_flag = ruler_won_duel
							set_variable = {
								name = coup_success
								value = -1
							}
						}
						50 = {		
							compare_modifier = {
								value = scope:duel_value
								multiplier = -3.5
								min = -49
							}
							add_character_flag = ruler_lost_duel
							set_variable = {
								name = coup_success
								value = 1
							}
						}
					}
					trigger_event = {
						id = yearly.7003
						days = { 30 40 }
					}
				}
			}
		}
	}
}

yearly.7002 = {
	type = letter_event
	opening = { desc = yearly.7002 }
	desc = yearly.7002.d
	sender = scope:marshal
	
	immediate = {
		hidden_effect = { fire_councillor = cp:councillor_marshal }
		add_character_flag = knew_about_coup
	}

	option = {
		name = yearly.7002.a
		trigger = {
			NOR = {
				has_lifestyle = martial_lifestyle
				has_trait = strategist
				has_trait = overseer
				has_trait = gallant
				prowess > high_skill_rating
				has_trait = lifestyle_blademaster
			}
		}
		add_character_flag = no_one_guarding
		add_character_flag = self_defense_prepared_poor
		add_stress = medium_stress_gain
	}
	option = {
		name = yearly.7002.b
		flavor = yearly.7002.b.tt
		custom_tooltip = yearly.7002.b.tt.2
		if = {
			limit = {
				scope:knight_1 = {
					opinion = {
						target = root
						value >= medium_positive_opinion
					}
				}
			}
			add_character_flag = knight_1_support
		}
		else = {
			add_character_flag = knight_1_defection
		}
		if = {
			limit = {
				scope:knight_2 = {
					opinion = {
						target = root
						value >= medium_positive_opinion
					}
				}
			}
			add_character_flag = knight_2_support
		}
		else = {
			add_character_flag = knight_2_defection
		}
		stress_impact = {
			trusting = minor_stress_loss
			paranoid = major_stress_gain
			craven = major_stress_gain

		}
	}
	option = {
		name = yearly.7002.c
		custom_tooltip = yearly.7002.c.tt
		trigger = {
			OR = {
				has_lifestyle = martial_lifestyle
				has_trait = strategist
				has_trait = overseer
				has_trait = gallant
				prowess > high_skill_rating
				has_trait = lifestyle_blademaster
			}
		}
		add_character_flag = self_defense_prepared_good
		add_character_flag = no_one_guarding
		stress_impact = {
			brave = minor_stress_loss
			craven = minor_stress_gain
		}
	}
	after = {
		trigger_event = {
			id = yearly.7003
			days = { 30 40 }
		}
	}
}

yearly.7003 = {
	hidden = yes
	immediate = {
		if = {
			limit = {
				has_character_flag = knight_1_defection
				has_character_flag = knight_2_defection 
			}
			trigger_event = {
				id = yearly.7004
				days = 30
			}
		}
		else = {
			trigger_event = {
				id = yearly.7005
				days = 30
			}
		}
	}
}

##### Knights dragging you off in a bag comedy hour

yearly.7004 = { #big power move with the sleepy ruler
	type = character_event
	title = yearly.7001.t
	desc = yearly.7004.desc
	theme = intrigue
	override_background = {
		event_background = alley_night
	}
	left_portrait = {
		character = root
		animation = fear
	}
	right_portrait = {
		character = scope:knight_1
		animation = rage
	}
	lower_right_portrait = {
		character = scope:knight_2
	}
	trigger = {
		scope:knight_1 = {
			is_available_ai_adult = yes
		}
		scope:knight_2 = {
			is_available_ai_adult = yes
		}
		is_available = yes
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		root.capital_province.county = {
			random_neighboring_county = {
				save_scope_as = neighbor_county
			}
		}
		scope:coup_faction = {
			every_faction_member = {
				custom = custom.all_faction_members
				leave_faction_with_cooldown_effect = {
					FACTION = scope:coup_faction
					YEARS = 20
				}
			}
		}
		add_character_modifier = {
			modifier = sleep_deprived_modifier
			days = 3
		}
		add_opinion = {
			target = scope:knight_1
			modifier = abductor_opinion
		}
		add_opinion = {
			target = scope:knight_2
			modifier = abductor_opinion
		}
		add_opinion = {
			target = scope:coup_leader
			modifier = attempted_abduction_opinion
		}
	}

	option = {
		name = yearly.7004.a
		flavor = yearly.7004.tt
		add_character_modifier = {
			modifier = watchful_modifier
			days = watchful_modifier_duration
		}
	}

	option = {
		name = yearly.7004.b
		flavor = yearly.7004.tt
		imprison_character_effect = {
			TARGET = scope:knight_1
			IMPRISONER = root
		}
		imprison_character_effect = {
			TARGET = scope:knight_2
			IMPRISONER = root
		}
		scope:knight_1 = {
			change_prison_type = dungeon
		}
		scope:knight_2 = {
			change_prison_type = dungeon
		}
	}
}


scripted_effect attack_random_outcome_effect = { #figuring out who is going to get targeted by the attack
	random_list = {
		20 = {
			death = {
				death_reason = death_assassination
				killer = scope:coup_leader
			}
			compare_modifier = {
				value = scope:coup_leader.prowess
				multiplier = 0.5
			}
			if = {
				limit = { is_close_family_of = root }
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = murdered_close_family_crime
					}
				}
			}
			else_if = {
				limit = { 
					OR = { 
						any_relation = {
							type = friend
							this = root
						}
						any_relation = {
							type = lover
							this = root
						}
						any_relation = {
							type = soulmate
							this = root
						}
					}
				}
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = murdered_someone_close_to_me_crime
					}
				}
			}
			else = {
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = plotting_against_liege_opinion
					}
				}
			}
		}
		40 = {
			increase_wounds_effect = { REASON = assassination }
			if = {
				limit = { is_close_family_of = root }
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = attempted_murder_close_family_crime
					}
				}
			}
			else_if = {
				limit = { 
					OR = { 
						any_relation = {
							type = friend
							this = root
						}
						any_relation = {
							type = lover
							this = root
						}
						any_relation = {
							type = soulmate
							this = root
						}
					}
				}
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = hurt_someone_close_to_me_crime
					}
				}
			}
			else = {
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = plotting_against_liege_opinion
					}
				}
			}
		}
		20 = {
			add_trait = disfigured
			if = {
				limit = { is_close_family_of = root }
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = attempted_murder_close_family_crime
					}
				}
			}
			else_if = {
				limit = { 
					OR = { 
						any_relation = {
							type = friend
							this = root
						}
						any_relation = {
							type = lover
							this = root
						}
						any_relation = {
							type = soulmate
							this = root
						}
					}
				}
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = hurt_someone_close_to_me_crime
					}
				}
			}
			else = {
				root = {
					add_opinion = {
						target = scope:coup_leader
						modifier = plotting_against_liege_opinion
					}
				}
			}
		}
	}
}


yearly.7005 = {
	type = character_event
	title = yearly.7001.t
	left_portrait = {
		character = root
		animation = fear
	}
	right_portrait = {
		character = scope:coup_leader
		animation = severelywounded
	}
	lower_left_portrait = {
		character = scope:first_character_kill
	}
	lower_right_portrait = {
		trigger = {
			OR = {
				has_character_flag = kills_two_people
				has_character_flag = kills_three_people
			}
		}
		character = scope:second_character_kill
	}
	lower_center_portrait = {
		trigger = {
			has_character_flag = kills_three_people
		}
		character = scope:third_character_kill
	}
	theme = martial
	override_background = {
		event_background = throne_room
	}
	desc = {
		first_valid = {
			triggered_desc = { #if your marshal warned you with the letter
				trigger = { has_character_flag = knew_about_coup }
				desc = yearly.7005.preparation	
			}
			triggered_desc = { #if your marshal didn't tell you
				trigger = { has_character_flag = ignored_guard_patrols }
				desc = yearly.7005.decreased_security
			}
			triggered_desc = {  #if your marshal didn't tell you
				trigger = { has_character_flag = increased_guard_patrols }
				desc = yearly.7005.increased_security
			}
		}
		first_valid = {
			triggered_desc = { #if your marshal wrote the letter and you don't have very good prowess and chose to defend yourself
				trigger = { has_character_flag = self_defense_prepared_poor }
				desc = yearly.7005.preparation_poor
			}
			triggered_desc = { #if your marshal wrote the letter and you have very good prowess and chose to defend yourself
				trigger = { has_character_flag = self_defense_prepared_good }
				desc = yearly.7005.preparation_good
			}
			triggered_desc = { #if your knights following the letter event proved loyal
				trigger = { has_character_flag = full_knight_support }
				desc = yearly.7005.knight_support
			}
			triggered_desc = {  #if one of your knights following the letter event proved loyal
				trigger = { has_character_flag = single_knight_defection }
				desc = yearly.7005.single_knight_support
			}
		}
		desc = yearly.7005.throne_approach
		first_valid = {
			triggered_desc = { #custom reasons for each faction to attack
				trigger = { has_character_flag = liberty_faction }
				desc = yearly.7005.liberty_faction
			}
			triggered_desc = {
				trigger = { has_character_flag = independence_faction }
				desc = yearly.7005.independence_faction
			}
			triggered_desc = {
				trigger = { has_character_flag = claimant_faction }
				desc = yearly.7005.claimant_faction
			}
			triggered_desc = {
				trigger = { has_character_flag = populist_faction }
				desc = yearly.7005.populist_faction
			}
		}
		desc = yearly.7005.weapon
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = kills_one_person }
				desc = yearly.7005.single_death
			}
			triggered_desc = {
				trigger = { has_character_flag = kills_two_people }
				desc = yearly.7005.double_death
			}
			triggered_desc = {
				trigger = { has_character_flag = kills_three_people }
				desc = yearly.7005.triple_death
			}
			triggered_desc = {
				trigger = { has_character_flag = kills_no_people }
				desc = yearly.7005.no_death
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = coup_ruler_strike }
				desc = yearly.7005.coup_ruler_strike
			}
		}
		first_valid = {
			triggered_desc = {
				trigger = { has_character_flag = kills_no_people }
				desc = yearly.7005.failure
			}
			triggered_desc = {
				trigger = { has_character_flag = coup_ruler_death }
				desc = yearly.7005.ruler_death
			}
			desc = yearly.7005.success
		}
	}	
	trigger = {
		scope:coup_leader = {
			is_available_ai_adult = yes
		}
		has_character_flag = had_first_coup_event
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		scope:coup_leader = {
			set_signature_weapon_effect = yes
		}
		if = {
			limit = {
				exists = scope:coup_faction
			}
			scope:coup_faction = { #to disband them later if needed
				every_faction_member = {
					add_to_list = coup_faction_list
				}
			}
		}
		set_variable = { #to calculate how many people are going to die
			name = coup_success
			value = 0
		}
		## Determine how guarded or warned the ruler is
		if = {
			limit = {
				has_character_flag = knight_1_support
				has_character_flag = knight_2_support
			}
			change_variable = {
				name = coup_success
				add = -1
			}
			add_character_flag = full_knight_support
		}
		if = {
			limit = {
				OR = {
					has_character_flag = knight_1_defection
					has_character_flag = knight_2_defection
				}
			}
			change_variable = {
				name = coup_success
				add = 1
			}
			add_character_flag = single_knight_defection
		}
		if = {
			limit = {
				has_character_flag = self_defense_prepared_poor
			}
			change_variable = {
				name = coup_success
				add = 1
			}
		}
		if = {
			limit = {
				has_character_flag = self_defense_prepared_good
			}
			change_variable = {
				name = coup_success
				add = -1
			}
		}
		if = {
			limit = {
				has_character_flag = ruler_lost_duel
			}
			change_variable = {
				name = coup_success
				add = 2
			}
		}
		if = {
			limit = {
				has_character_flag = ruler_won_duel
			}
			change_variable = {
				name = coup_success
				add = -1
			}
		}
		if = {
			limit = {
				has_character_flag = knew_about_coup
			}
			change_variable = {
				name = coup_success
				add = -1
			}
		}
		if = {
			limit = {
				has_character_flag = ignored_guard_patrols
			}
			change_variable = {
				name = coup_success
				add = 1
			}
		}
		#to have custom loc for the attack reasons for different faction types
		if = {
			limit = {
				scope:coup_leader = {
					is_leading_faction_type = liberty_faction
				}
			}
			add_character_flag = liberty_faction
		}
		else_if = {
			limit = {
				scope:coup_leader = {
					is_leading_faction_type = independence_faction
				}
			}
			add_character_flag = independence_faction
		}
		if = {
			limit = {
				scope:coup_leader = {
					is_leading_faction_type = claimant_faction
				}
			}
			add_character_flag = claimant_faction
		}
		if = {
			limit = {
				scope:coup_leader = {
					is_leading_faction_type = populist_faction
				}
			}
			add_character_flag = populist_faction
		}
		### Find some characters who might get attacked
		if = {
			limit = {
				exists = root.primary_spouse
				root.primary_spouse = {
					NOT = {
						is_in_list = coup_faction_list
					}
				}
			}
			root.primary_spouse = { add_to_list = character_kill_list }
		}
		if = {
			limit = {
				any_councillor = {
					exists = yes
					NOR = {
						has_council_position = councillor_marshal
						primary_spouse = this
						is_in_list = coup_faction_list
					}
				}
			}
			random_councillor = {
				limit = {
					NOR = { 
						has_council_position = councillor_marshal
						primary_spouse = this
						is_in_list = coup_faction_list
					}
				}
				add_to_list = character_kill_list
			}
		}
		if = {
			limit = {
				exists = root.primary_heir
				root.primary_heir = {
					NOT = {
						is_in_list = coup_faction_list
					}
				}
			}
			root.primary_heir = { add_to_list = character_kill_list }
		}

		if = {
			limit = {
				exists = root.father
				root.father = { 
					is_courtier_of = root 
					NOT = { is_in_list = coup_faction_list }
				}
			}
			root.father = { add_to_list = character_kill_list }
		}
		if = {
			limit = {
				exists = root.mother
				root.mother = { 
					is_courtier_of = root 
					NOT = { is_in_list = coup_faction_list } 
				}
			}
			root.mother = { add_to_list = character_kill_list }	
		}
		if = {
			limit = {
				any_powerful_vassal = {
					is_councillor = no
					exists = yes
					NOT = { is_in_list = coup_faction_list }
				}
			}
			random_vassal = {
				limit = {
					is_councillor = no
					NOT = { is_in_list = coup_faction_list }
					is_powerful_vassal = yes
				}
				add_to_list = character_kill_list
			}
		}
		random_vassal = {
			limit = { NOT = { is_in_list = coup_faction_list } }
			add_to_list = character_kill_list
		}
		random_vassal = {
			limit = {
				NOR = {
					is_in_list = coup_faction_list
					is_in_list = character_kill_list
				}
			}
			add_to_list = character_kill_list
		}
		random_vassal = {
			limit = { 
				NOR = {
					is_in_list = coup_faction_list
					is_in_list = character_kill_list
				}
			}
			add_to_list = character_kill_list
		}
		#attacking more important characters first
		random_in_list = {
			list = character_kill_list
			weight = {
				base = 1
				modifier  = {
					factor = 20
					exists = root.primary_spouse
					any_relation = {
						type = lover
						this = root.primary_spouse
					}
				}
				modifier  = {
					factor = 20
					exists = root.primary_spouse
					any_relation = {
						type = soulmate
						this = root.primary_spouse
					}
				}
				modifier = {
					factor = 20
					is_powerful_vassal = yes
				}
				modifier = {
					factor = 10
					is_close_family_of = root
				}
				modifier = {
					opinion = {
						target = root
						value > medium_positive_opinion
					}
					factor = 5
				}
			}
			save_scope_as = first_character_kill
		}
		random_in_list = {
			limit = {
				NOT = {
					scope:first_character_kill = this
				}
			}
			weight = {
				base = 1
				modifier  = {
					factor = 20
					exists = root.primary_spouse
					has_relation_lover = root.primary_spouse
				}
				modifier  = {
					factor = 20
					exists = root.primary_spouse
					has_relation_soulmate = root.primary_spouse
				}
				modifier = {
					factor = 20
					is_powerful_vassal = yes
				}
				modifier = {
					factor = 10
					is_close_family_of = root
				}
				modifier = {
					opinion = {
						target = root
						value > medium_positive_opinion
					}
					factor = 5
				}
			}			
			list = character_kill_list
			save_scope_as = second_character_kill
		}
		random_in_list = {
			limit = {
				NOR = {
					scope:first_character_kill = this
					scope:second_character_kill = this
				}
			}
			weight = {
				base = 1
				modifier  = {
					factor = 20
					exists = root.primary_spouse
					has_relation_lover = root.primary_spouse
				}
				modifier  = {
					factor = 20
					exists = root.primary_spouse
					has_relation_soulmate = root.primary_spouse
				}
				modifier = {
					factor = 20
					is_powerful_vassal = yes
				}
				modifier = {
					factor = 10
					is_close_family_of = root
				}
				modifier = {
					opinion = {
						target = root
						value > medium_positive_opinion
					}
					factor = 5
				}
			}			
			list = character_kill_list
			save_scope_as = third_character_kill
		}
		## Determine how wounded the characters become
		if = {
			limit = { var:coup_success = 0 }
			add_character_flag = kills_one_person
			scope:first_character_kill = {
				attack_random_outcome_effect = yes
			}
		}
		else_if = {
			limit = {
				var:coup_success = 1
			}
			add_character_flag = kills_two_people
			scope:first_character_kill = {
				attack_random_outcome_effect = yes
			}
			scope:second_character_kill = {
				attack_random_outcome_effect = yes
			}
		}
		else_if = {
			limit = {
				var:coup_success > 1
			}
			add_character_flag = kills_three_people
			scope:first_character_kill = {
				attack_random_outcome_effect = yes
			}
			scope:second_character_kill = {
				attack_random_outcome_effect = yes
			}
			scope:third_character_kill = {
				attack_random_outcome_effect = yes
			}
		}
		else = {
			add_character_flag = kills_no_people
		}
		if = {
			limit = { NOT = { has_character_flag = kills_no_people } }
			random_list = {
				5 = {
					compare_modifier = {
						value = var:coup_success
						multiplier = 0.5
					}
					modifier = {
						has_character_flag = no_one_guarding
						factor = 2
					}
					add_character_flag = coup_ruler_death
				}
				40 = {
					increase_wounds_effect = { REASON = assassination }
					add_character_flag = coup_ruler_strike
					add_opinion = {
						target = scope:coup_leader
						modifier = attempted_murder_me_crime
					}
				}
				20 = {
					add_trait = disfigured
					add_character_flag = coup_ruler_strike
					add_opinion = {
						target = scope:coup_leader
						modifier = attempted_murder_me_crime
					}
				}
			}
		}
	}

	option = { #imprison them
		name = yearly.7005.a
		trigger = {
			has_character_flag = kills_no_people
			NOT = { has_character_flag = coup_ruler_death }
		}
		rightfully_imprison_character_effect = {
			TARGET = scope:coup_leader
			IMPRISONER = root
		}
	}

	option = { #let them slit their own throat
		name = yearly.7005.b
		trigger = {
			NOT = { has_character_flag = coup_ruler_death }
		}
		scope:coup_leader = {
			death = {
				death_reason = death_refused_to_be_imprisoned
			}
		}
	}
	
	option = { #torture and imprison them
		name = yearly.7005.c
		custom_tooltip = yearly.7005.c.tt
		trigger = {
			NOT = { has_character_flag = coup_ruler_death }
		}
		rightfully_imprison_character_effect = {
			TARGET = scope:coup_leader
			IMPRISONER = root
		}
		scope:coup_leader = {
			add_trait = blind
		}
	}
	option = { #if this wasn't accompanied with bloodshed, just loot their titles
		name = yearly.7005.d
		trigger = {
			has_character_flag = kills_no_people
			NOT = { has_character_flag = coup_ruler_death }
		}
		custom_tooltip = yearly.7005.d.tt
		hidden_effect = {
			scope:coup_leader = {
				every_held_title = {
					limit = {
						tier >= tier_county
					}
					add_to_list = revoked_coup_leader_titles
				}
				every_vassal = {
					add_to_list = vassals_for_you
				}
				add_opinion = {
					target = root
					modifier = revoked_title
				}
			}
			create_title_and_vassal_change = {
				type = granted
				save_scope_as = title_change_coup
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = revoked_coup_leader_titles
				change_title_holder = {
					holder = root
					change = scope:title_change_coup
					take_baronies = no
				}
			}
			every_in_list = {
				list = vassals_for_you
				change_liege = {
					liege = root
					change = scope:title_change_coup
				}
			}
			resolve_title_and_vassal_change = scope:title_change_coup
		}
	}
	option = { #guess I'll die
		name = {
			trigger = {
				OR = {
					has_trait = theologian
					has_trait = zealous
				}
			}
			text = yearly.7005.devout.e
		}
		name = yearly.7005.e
		trigger = {
			has_character_flag = coup_ruler_death
		}
	}
	after = {
		if = {
			limit = {
				has_character_flag = coup_ruler_death
			}
			death = {
				death_reason = death_assassination
				killer = scope:coup_leader
			}
		}
		else = {
			remove_character_flag = knight_1_support
			remove_character_flag = knight_2_support
			remove_character_flag = full_knight_support
			remove_character_flag = knight_1_defection
			remove_character_flag = knight_2_defection
			remove_character_flag = single_knight_defection
			remove_character_flag = self_defense_prepared_poor
			remove_character_flag = self_defense_prepared_good
			remove_character_flag = ruler_lost_duel
			remove_character_flag = ruler_won_duel
			remove_character_flag = knew_about_coup
			remove_character_flag = ignored_guard_patrols
			remove_character_flag = increased_guard_patrols
			remove_character_flag = liberty_faction
			remove_character_flag = independence_faction
			remove_character_flag = claimant_faction
			remove_character_flag = populist_faction
			remove_character_flag = kills_one_person
			remove_character_flag = kills_two_people
			remove_character_flag = kills_three_people
			remove_character_flag = kills_no_people
			remove_character_flag = coup_ruler_death
		}
	}
}
